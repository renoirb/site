__NUXT_JSONP__("/blog/category/snippet", (function(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,_,$,aa,ab,ac,ad,ae,af,ag,ah,ai,aj,ak,al,am,an,ao,ap,aq,ar,as,at,au,av,aw,ax,ay,az,aA,aB,aC,aD,aE,aF,aG,aH,aI,aJ,aK,aL,aM,aN,aO,aP,aQ,aR,aS,aT,aU,aV,aW,aX){return {data:[{},{},{contents:[{title:"Add OpenStack instance meta-data info in your salt grains",locale:Y,created:"2015-05-22T00:00:00.000Z",updated:"2023-11-17T00:00:00.000Z",canonical:"https:\u002F\u002Frenoirboulanger.com\u002Fblog\u002F2015\u002F05\u002Fadd-openstack-instance-meta-data-info-salt-grains\u002F",status:Z,revising:p,migrateLinks:J,migrateImages:p,gallery:p,caption:p,categories:[A],tags:[ae,"operations",af,ag,"open-source"],keywords:["Ansible","Infrastructure as Code"],preamble:{text:"It is possible the code shown here no longer works.\nThis was written at the time before VMWare aquired SaltStack and maybe\ncode shown uses parts of Salt Stack that no longer exists.\n"},coverImage:{src:"~\u002Fassets\u002Fcontent\u002Fblog\u002F2015\u002F05\u002Fwebplatform-openstack-cluster-2014-10-06.png",alt:"A terminal window showing Open Stack nova client output",text:"Open Stack NOVA client is leveraging an internal HTTP API to display data we can\nconsume from the CLI.\nThe present article shows how to add data from OpenStack into Salt Stack.\n"},excerpt:"Ever wanted to target salt states based on data only the underlying OpenStack cluster knows. Here’s how I did it.",toc:[{id:ah,depth:C,text:ai},{id:aj,depth:C,text:ak},{id:al,depth:C,text:am},{id:an,depth:C,text:ao}],body:{type:N,children:[{type:b,tag:g,props:{},children:[{type:a,value:"During a work session on my salt-states for WebPlatform.org I wanted to shape be\nable to query the OpenStack cluster meta-data so that I can adjust more\nefficiently my salt configuration."}]},{type:a,value:f},{type:b,tag:g,props:{},children:[{type:a,value:"What are grains? Grains are structured data that describes what a minion has\nsuch as which version of GNU\u002FLinux its running, what are the network adapters,\netc."}]},{type:a,value:f},{type:b,tag:g,props:{},children:[{type:a,value:"The following is a Python script that adds data in Salt Stack' internal database\ncalled grains."}]},{type:a,value:f},{type:b,tag:g,props:{},children:[{type:a,value:"I have to confess that I didn't write the script but adapted it to work within\nan OpenStack cluster. More precisely on DreamHost's DreamCompute cluster. The\noriginal script came from "},{type:b,tag:m,props:{href:"https:\u002F\u002Fgithub.com\u002Fsaltstack\u002Fsalt-contrib",rel:[v,w,x],target:t},children:[{type:a,value:"saltstack\u002Fsalt-contrib"}]},{type:a,value:" and the original file was\n"},{type:b,tag:m,props:{href:ap,rel:[v,w,x],target:t},children:[{type:a,value:"ec2_info.py"}]},{type:a,value:" to read data from EC2."}]},{type:a,value:f},{type:b,tag:g,props:{},children:[{type:a,value:"The "},{type:b,tag:m,props:{href:ap,rel:[v,w,x],target:t},children:[{type:a,value:"original script"}]},{type:a,value:" wasn't getting any data in the cluster. Most likely due\nto API changes and that EC2 API exposes dynamic meta-data that the\nDreamCompute\u002FOpenStack cluster don't."}]},{type:a,value:f},{type:b,tag:"rb-notice-box",props:{variant:"info",className:["my-5"]},children:[{type:a,value:f},{type:b,tag:aq,props:{slot:"header"},children:[{type:a,value:"Script source"}]},{type:a,value:f},{type:b,tag:g,props:{},children:[{type:a,value:"The article’s source script is available on GitHub as a Python script we can\ninsert into SaltStack as a grain"}]},{type:a,value:f},{type:b,tag:ar,props:{},children:[{type:a,value:f},{type:b,tag:O,props:{},children:[{type:b,tag:m,props:{href:"https:\u002F\u002Fgithub.com\u002Fwebplatform\u002Fsalt-states\u002Fblob\u002Fmaster\u002F_grains\u002Fdreamcompute.py",rel:[v,w,x],target:t},children:[{type:a,value:"github.com\u002Fwebplatform\u002Fsalt-states"}]}]},{type:a,value:f}]},{type:a,value:f}]},{type:a,value:f},{type:b,tag:g,props:{},children:[{type:a,value:"In the end, I edited the file to make it work on DreamCompute and also truncated\nsome data that the grains subsystem already has."}]},{type:a,value:f},{type:b,tag:g,props:{},children:[{type:a,value:"My original objective was to get a list of "},{type:b,tag:l,props:{},children:[{type:a,value:as}]},{type:a,value:" the VM was\nassigned. Unfortunately the API doesn't give that information yet. Hopefully\nI'll find a way to get that information some day."}]},{type:a,value:f},{type:b,tag:D,props:{id:ah},children:[{type:b,tag:m,props:{href:"#get-openstack-instance-detail-using-salt",ariaHidden:E,tabIndex:F},children:[{type:b,tag:c,props:{className:[G,H]},children:[]}]},{type:a,value:ai}]},{type:a,value:f},{type:b,tag:g,props:{},children:[{type:a,value:"Locally"}]},{type:a,value:f},{type:b,tag:q,props:{className:[r]},children:[{type:b,tag:n,props:{className:[s,P]},children:[{type:b,tag:l,props:{},children:[{type:a,value:"salt-call grains.get dreamcompute:uuid\n"}]}]}]},{type:a,value:f},{type:b,tag:q,props:{className:[r]},children:[{type:b,tag:n,props:{className:[s,B]},children:[{type:b,tag:l,props:{},children:[{type:b,tag:c,props:{className:[d,i,j]},children:[{type:a,value:"local"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:"\n    10a4f390"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:at},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:au},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:_},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:av}]}]}]},{type:a,value:f},{type:b,tag:g,props:{},children:[{type:a,value:"Or for another machine"}]},{type:a,value:f},{type:b,tag:q,props:{className:[r]},children:[{type:b,tag:n,props:{className:[s,P]},children:[{type:b,tag:l,props:{},children:[{type:a,value:"salt app1 grains.get dreamcompute:uuid\n"}]}]}]},{type:a,value:f},{type:b,tag:q,props:{className:[r]},children:[{type:b,tag:n,props:{className:[s,B]},children:[{type:b,tag:l,props:{},children:[{type:b,tag:c,props:{className:[d,i,j]},children:[{type:a,value:aw}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:"\n    510f5f24"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:"217b"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:"4fd2"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:_},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:"f00000000000\n"}]}]}]},{type:a,value:f},{type:b,tag:g,props:{},children:[{type:a,value:"What size did we create a particular VM?"}]},{type:a,value:f},{type:b,tag:q,props:{className:[r]},children:[{type:b,tag:n,props:{className:[s,P]},children:[{type:b,tag:l,props:{},children:[{type:a,value:"salt app1 grains.get dreamcompute:instance_type\n"}]}]}]},{type:a,value:f},{type:b,tag:q,props:{className:[r]},children:[{type:b,tag:n,props:{className:[s,B]},children:[{type:b,tag:l,props:{},children:[{type:b,tag:c,props:{className:[d,i,j]},children:[{type:a,value:aw}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:"\n    lightspeed\n"}]}]}]},{type:a,value:f},{type:b,tag:D,props:{id:aj},children:[{type:b,tag:m,props:{href:"#what-data-you-can-get",ariaHidden:E,tabIndex:F},children:[{type:b,tag:c,props:{className:[G,H]},children:[]}]},{type:a,value:ak}]},{type:a,value:f},{type:b,tag:g,props:{},children:[{type:a,value:"Here is a sample of the grain data that will be added to every salt minion you\nmanage."}]},{type:a,value:f},{type:b,tag:g,props:{},children:[{type:a,value:"You might notice that some data will be repeated such as the 'hostname', but the\nrest can be very useful if you want to use the data within your configuration\nmanag"}]},{type:a,value:f},{type:b,tag:q,props:{className:[r]},children:[{type:b,tag:n,props:{className:[s,B]},children:[{type:b,tag:l,props:{},children:[{type:b,tag:c,props:{className:[d,i,j]},children:[{type:a,value:"dreamcompute"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:u},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:o}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:o}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:o}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:u},{type:b,tag:c,props:{className:[d,i,j]},children:[{type:a,value:ax}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:"\n        iad"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:b,tag:c,props:{className:[d,K]},children:[{type:a,value:ay}]},{type:a,value:u},{type:b,tag:c,props:{className:[d,i,j]},children:[{type:a,value:"block_device_mapping"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:y},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:o}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:o}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:o}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:y},{type:b,tag:c,props:{className:[d,i,j]},children:[{type:a,value:"ami"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:az},{type:b,tag:c,props:{className:[d,i,j]},children:[{type:a,value:"ebs0"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:"\n            \u002Fdev\u002Fvdb\n        "},{type:b,tag:c,props:{className:[d,i,j]},children:[{type:a,value:"ebs1"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:az},{type:b,tag:c,props:{className:[d,i,j]},children:[{type:a,value:N}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:"\n            \u002Fdev\u002Fvda\n    "},{type:b,tag:c,props:{className:[d,i,j]},children:[{type:a,value:"hostname"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:"\n        salt.novalocal\n    "},{type:b,tag:c,props:{className:[d,i,j]},children:[{type:a,value:"instance_action"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:"\n        none\n    "},{type:b,tag:c,props:{className:[d,i,j]},children:[{type:a,value:"instance_id"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:"\n        i"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:b,tag:c,props:{className:[d,K]},children:[{type:a,value:"00000000"}]},{type:a,value:u},{type:b,tag:c,props:{className:[d,i,j]},children:[{type:a,value:"instance_type"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:"\n        lightspeed\n    "},{type:b,tag:c,props:{className:[d,i,j]},children:[{type:a,value:"launch_index"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:y},{type:b,tag:c,props:{className:[d,K]},children:[{type:a,value:"0"}]},{type:a,value:u},{type:b,tag:c,props:{className:[d,i,j]},children:[{type:a,value:"local_ipv4"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:"\n        10.10.10.11\n    "},{type:b,tag:c,props:{className:[d,i,j]},children:[{type:a,value:aA}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:"\n        salt\n    "},{type:b,tag:c,props:{className:[d,i,j]},children:[{type:a,value:"network_config"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:y},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:o}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:o}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:o}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:y},{type:b,tag:c,props:{className:[d,i,j]},children:[{type:a,value:"content_path"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:"\n            \u002Fcontent\u002F0000\n        "},{type:b,tag:c,props:{className:[d,i,j]},children:[{type:a,value:aA}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:"\n            network_config\n    "},{type:b,tag:c,props:{className:[d,i,j]},children:[{type:a,value:"placement"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:y},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:o}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:o}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:o}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:y},{type:b,tag:c,props:{className:[d,i,j]},children:[{type:a,value:ax}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:"\n            iad"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:b,tag:c,props:{className:[d,K]},children:[{type:a,value:ay}]},{type:a,value:u},{type:b,tag:c,props:{className:[d,i,j]},children:[{type:a,value:"public_ipv4"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:"\n        203.0.113.11\n    "},{type:b,tag:c,props:{className:[d,i,j]},children:[{type:a,value:"public_keys"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:y},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:o}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:o}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:o}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:y},{type:b,tag:c,props:{className:[d,i,j]},children:[{type:a,value:"someuser"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:"\n            ssh"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:"rsa "},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:aB}]},{type:a,value:"an rsa public key"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:aB}]},{type:a,value:" someuser"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:"comment@example.org\n    "},{type:b,tag:c,props:{className:[d,i,j]},children:[{type:a,value:"ramdisk_id"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:aC},{type:b,tag:c,props:{className:[d,i,j]},children:[{type:a,value:"reservation_id"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:"\n        r"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:b,tag:c,props:{className:[d,K]},children:[{type:a,value:"33333333"}]},{type:a,value:u},{type:b,tag:c,props:{className:[d,i,j]},children:[{type:a,value:as}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:aC},{type:b,tag:c,props:{className:[d,i,j]},children:[{type:a,value:"uuid"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:"\n        10a4f390"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:at},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:au},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:_},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:av}]}]}]},{type:a,value:f},{type:b,tag:D,props:{id:al},children:[{type:b,tag:m,props:{href:"#what-does-the-script-do",ariaHidden:E,tabIndex:F},children:[{type:b,tag:c,props:{className:[G,H]},children:[]}]},{type:a,value:am}]},{type:a,value:f},{type:b,tag:g,props:{},children:[{type:a,value:"The script basically scrapes OpenStack meta-data service and serializes into\nsaltstack grains system the data it gets."}]},{type:a,value:f},{type:b,tag:g,props:{},children:[{type:b,tag:m,props:{href:aD,rel:[v,w,x],target:t},children:[{type:a,value:"OpenStack's meta-data service"}]},{type:a,value:" is similar to what you'd get from AWS, but\ndoesn't expose exactly the same data. This is why I had to adapt the original\nscript."}]},{type:a,value:f},{type:b,tag:g,props:{},children:[{type:a,value:"To get data from an instance you simply (really!) need to make an HTTP call to\nan "},{type:b,tag:m,props:{href:aD,rel:[v,w,x],target:t},children:[{type:a,value:"internal IP address that OpenStack nova"}]},{type:a,value:" answers. (that’s what the IPv4\naddress starting by "},{type:b,tag:l,props:{},children:[{type:a,value:"169."}]},{type:a,value:" is)"}]},{type:a,value:f},{type:b,tag:g,props:{},children:[{type:a,value:"For example, from an AWS\u002FOpenStack VM, you can know the instance hostname by\ndoing"}]},{type:a,value:f},{type:b,tag:q,props:{className:[r]},children:[{type:b,tag:n,props:{className:[s,P]},children:[{type:b,tag:l,props:{},children:[{type:b,tag:c,props:{className:[d,"function"]},children:[{type:a,value:"curl"}]},{type:a,value:" http:\u002F\u002F169.254.169.254\u002Flatest\u002Fmeta-data\u002Fhostname\n\nsalt.novalocal\n"}]}]}]},{type:a,value:f},{type:b,tag:g,props:{},children:[{type:a,value:"To know what the script calls, "},{type:b,tag:m,props:{href:"https:\u002F\u002Fgithub.com\u002Fwebplatform\u002Fsalt-states\u002Fcommit\u002F821ca803#diff-6eea2056af3e939361a559b84665c1d97fc9e062f7b7f79910567fc688881056R33",rel:[v,w,x],target:t},children:[{type:a,value:"you can add a line at "},{type:b,tag:l,props:{},children:[{type:a,value:"_call_aws(url)"}]},{type:a,value:"\nmethod"}]},{type:a,value:" ("},{type:b,tag:m,props:{href:"https:\u002F\u002Fgithub.com\u002Fwebplatform\u002Fsalt-states\u002Fcommit\u002F821ca803#diff-6eea2056af3e939361a559b84665c1d97fc9e062f7b7f79910567fc688881056R32-R34",rel:[v,w,x],target:t},children:[{type:a,value:"lines 32-34"}]},{type:a,value:"), like so;"}]},{type:a,value:f},{type:b,tag:q,props:{className:[r]},children:[{type:b,tag:n,props:{className:[s,"language-diff"]},children:[{type:b,tag:l,props:{},children:[{type:a,value:"diff --git a\u002F_grains\u002Fdreamcompute.py b\u002F_grains\u002Fdreamcompute.py\nindex 682235d..c3af659 100644\n"},{type:b,tag:c,props:{className:[d,aE]},children:[{type:a,value:"--- a\u002F_grains\u002Fdreamcompute.py"}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,aE]},children:[{type:a,value:"+++ b\u002F_grains\u002Fdreamcompute.py"}]},{type:a,value:"\n@@ -25,6 +25,7 @@ def _call_aws(url):\n\n"},{type:b,tag:c,props:{className:[d,I]},children:[{type:b,tag:c,props:{className:[d,L,I]},children:[{type:a,value:z}]},{type:b,tag:c,props:{className:[d,M]},children:[{type:a,value:"    \"\"\"\n"}]},{type:b,tag:c,props:{className:[d,L,I]},children:[{type:a,value:z}]},{type:b,tag:c,props:{className:[d,M]},children:[{type:a,value:"    conn = httplib.HTTPConnection(\"169.254.169.254\", 80, timeout=1)\n"}]}]},{type:b,tag:c,props:{className:[d,"inserted-sign",aF]},children:[{type:b,tag:c,props:{className:[d,L,aF]},children:[{type:a,value:"+"}]},{type:b,tag:c,props:{className:[d,M]},children:[{type:a,value:"    LOG.info('API call to ' + url )\n"}]}]},{type:b,tag:c,props:{className:[d,I]},children:[{type:b,tag:c,props:{className:[d,L,I]},children:[{type:a,value:z}]},{type:b,tag:c,props:{className:[d,M]},children:[{type:a,value:"    conn.request('GET', url)\n"}]},{type:b,tag:c,props:{className:[d,L,I]},children:[{type:a,value:z}]},{type:b,tag:c,props:{className:[d,M]},children:[{type:a,value:"    return conn.getresponse()\n"}]}]}]}]}]},{type:a,value:f},{type:b,tag:g,props:{},children:[{type:a,value:"When you "},{type:b,tag:l,props:{},children:[{type:a,value:"saltutil.sync_all"}]},{type:a,value:" (i.e. refresh grains and other data), the log will\ntell you which endpoints it queried."}]},{type:a,value:f},{type:b,tag:g,props:{},children:[{type:a,value:"In my case they were:"}]},{type:a,value:f},{type:b,tag:q,props:{className:[r]},children:[{type:b,tag:n,props:{className:[s,"language-shellsession"]},children:[{type:b,tag:l,props:{},children:[{type:b,tag:c,props:{className:[d,"output"]},children:[{type:a,value:"[INFO    ] API call to \u002Fopenstack\u002F2012-08-10\u002Fmeta_data.json\n[INFO    ] API call to \u002Flatest\u002Fmeta-data\u002F\n[INFO    ] API call to \u002Flatest\u002Fmeta-data\u002Fblock-device-mapping\u002F\n[INFO    ] API call to \u002Flatest\u002Fmeta-data\u002Fblock-device-mapping\u002Fami\n[INFO    ] API call to \u002Flatest\u002Fmeta-data\u002Fblock-device-mapping\u002Febs0\n[INFO    ] API call to \u002Flatest\u002Fmeta-data\u002Fblock-device-mapping\u002Febs1\n[INFO    ] API call to \u002Flatest\u002Fmeta-data\u002Fblock-device-mapping\u002Froot\n[INFO    ] API call to \u002Flatest\u002Fmeta-data\u002Fhostname\n[INFO    ] API call to \u002Flatest\u002Fmeta-data\u002Finstance-action\n[INFO    ] API call to \u002Flatest\u002Fmeta-data\u002Finstance-id\n[INFO    ] API call to \u002Flatest\u002Fmeta-data\u002Finstance-type\n[INFO    ] API call to \u002Flatest\u002Fmeta-data\u002Flocal-ipv4\n[INFO    ] API call to \u002Flatest\u002Fmeta-data\u002Fplacement\u002F\n[INFO    ] API call to \u002Flatest\u002Fmeta-data\u002Fplacement\u002Favailability-zone\n[INFO    ] API call to \u002Flatest\u002Fmeta-data\u002Fpublic-ipv4\n[INFO    ] API call to \u002Flatest\u002Fmeta-data\u002Framdisk-id\n[INFO    ] API call to \u002Flatest\u002Fmeta-data\u002Freservation-id\n[INFO    ] API call to \u002Flatest\u002Fmeta-data\u002Fsecurity-groups\n[INFO    ] API call to \u002Fopenstack\u002F2012-08-10\u002Fmeta_data.json\n[INFO    ] API call to \u002Flatest\u002Fmeta-data\u002F\n[INFO    ] API call to \u002Flatest\u002Fmeta-data\u002Fblock-device-mapping\u002F\n[INFO    ] API call to \u002Flatest\u002Fmeta-data\u002Fblock-device-mapping\u002Fami\n[INFO    ] API call to \u002Flatest\u002Fmeta-data\u002Fblock-device-mapping\u002Febs0\n[INFO    ] API call to \u002Flatest\u002Fmeta-data\u002Fblock-device-mapping\u002Febs1\n[INFO    ] API call to \u002Flatest\u002Fmeta-data\u002Fblock-device-mapping\u002Froot\n[INFO    ] API call to \u002Flatest\u002Fmeta-data\u002Fhostname\n[INFO    ] API call to \u002Flatest\u002Fmeta-data\u002Finstance-action\n[INFO    ] API call to \u002Flatest\u002Fmeta-data\u002Finstance-id\n[INFO    ] API call to \u002Flatest\u002Fmeta-data\u002Finstance-type\n[INFO    ] API call to \u002Flatest\u002Fmeta-data\u002Flocal-ipv4\n[INFO    ] API call to \u002Flatest\u002Fmeta-data\u002Fplacement\u002F\n[INFO    ] API call to \u002Flatest\u002Fmeta-data\u002Fplacement\u002Favailability-zone\n[INFO    ] API call to \u002Flatest\u002Fmeta-data\u002Fpublic-ipv4\n[INFO    ] API call to \u002Flatest\u002Fmeta-data\u002Framdisk-id\n[INFO    ] API call to \u002Flatest\u002Fmeta-data\u002Freservation-id\n[INFO    ] API call to \u002Flatest\u002Fmeta-data\u002Fsecurity-groups\n"}]}]}]}]},{type:a,value:f},{type:b,tag:g,props:{},children:[{type:a,value:"Its quite heavy."}]},{type:a,value:f},{type:b,tag:g,props:{},children:[{type:a,value:"Hopefully the script respects HTTP headers and don't bypass "},{type:b,tag:l,props:{},children:[{type:a,value:"304 Not Modified"}]},{type:a,value:"\nresponses. Otherwise it'll add load to nova. Maybe I should check that\n(note-to-self)."}]},{type:a,value:f},{type:b,tag:D,props:{id:an},children:[{type:b,tag:m,props:{href:"#install",ariaHidden:E,tabIndex:F},children:[{type:b,tag:c,props:{className:[G,H]},children:[]}]},{type:a,value:ao}]},{type:a,value:f},{type:b,tag:g,props:{},children:[{type:a,value:"You can add this feature by adding a file in your salt states repository in the\n"},{type:b,tag:l,props:{},children:[{type:a,value:"_grains\u002F"}]},{type:a,value:" folder. The file can have any name ending by "},{type:b,tag:l,props:{},children:[{type:a,value:".py"}]},{type:a,value:Q}]},{type:a,value:f},{type:b,tag:g,props:{},children:[{type:a,value:"You can grab the grain python code "},{type:b,tag:m,props:{href:"https:\u002F\u002Fgist.github.com\u002FWebPlatformDocs\u002F6b26b67321fe15870aa0",rel:[v,w,x],target:t,title:"Gist where you can add openstack meta-data in your grains"},children:[{type:a,value:"in this gist"}]},{type:a,value:Q}]},{type:a,value:f},{type:a,value:f},{type:a,value:f}]},dir:"\u002Fblog\u002F2015\u002F05",path:"\u002Fblog\u002F2015\u002F05\u002Fadd-openstack-instance-meta-data-info-salt-grains",extension:$,slug:"add-openstack-instance-meta-data-info-salt-grains",createdAt:aG,updatedAt:aG,category:A,prettyfiedTemporalDate:{prettified:"Friday, May 22, 2015",temporalDate:"2015-05-22"}},{title:"A few useful GNU\u002FLinux truth tests while creating salt states",locale:Y,created:"2015-03-10T00:00:00.000Z",updated:"2023-02-18T00:00:00.000Z",canonical:"https:\u002F\u002Frenoirboulanger.com\u002Fblog\u002F2015\u002F03\u002Fuseful-gnulinux-truth-tests\u002F",status:Z,revising:J,caption:p,caracteresBizzares:p,gallery:p,migrateCode:J,migrateImages:p,migrateLinks:p,categories:[A],tags:[ae,af,ag,"procedures"],keywords:["GNU","usermod"],description:aH,excerpt:aH,toc:[{id:aI,depth:C,text:aJ},{id:aK,depth:C,text:"Change ownership on a folder only if its not what we expect"}],body:{type:N,children:[{type:b,tag:g,props:{},children:[{type:a,value:"Nothing amazing here, just that in some situations I want to run commands in\nsalt stack only in some situations that should be enforced."}]},{type:a,value:f},{type:b,tag:g,props:{},children:[{type:a,value:"Those tests are written within Salt stack states and YAML, but the test are\nplain GNU\u002FLinux "},{type:b,tag:l,props:{},children:[{type:a,value:"tests"}]},{type:a,value:Q}]},{type:a,value:f},{type:b,tag:D,props:{id:aI},children:[{type:b,tag:m,props:{ariaHidden:E,href:"#add-group-additional-membership-to-user",tabIndex:F},children:[{type:b,tag:c,props:{className:[G,H]},children:[]}]},{type:a,value:aJ}]},{type:a,value:f},{type:b,tag:q,props:{className:[r]},children:[{type:b,tag:n,props:{className:[B,s]},children:[{type:b,tag:l,props:{},children:[{type:b,tag:c,props:{className:[d,i,j]},children:[{type:a,value:aL}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:aa},{type:b,tag:c,props:{className:[d,i,j]},children:[{type:a,value:ab}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:u},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:z},{type:b,tag:c,props:{className:[d,i,j]},children:[{type:a,value:aM}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:z},{type:b,tag:c,props:{className:[d,R]},children:[{type:a,value:"'grep \"^amavis\" \u002Fetc\u002Fgroup | grep -q -e clamav'"}]},{type:a,value:f}]}]}]},{type:a,value:f},{type:b,tag:g,props:{},children:[{type:a,value:"A similar alternate could also be"}]},{type:a,value:f},{type:b,tag:q,props:{className:[r]},children:[{type:b,tag:n,props:{className:[B,s]},children:[{type:b,tag:l,props:{},children:[{type:b,tag:c,props:{className:[d,i,j]},children:[{type:a,value:aL}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:aa},{type:b,tag:c,props:{className:[d,i,j]},children:[{type:a,value:ab}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:u},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:z},{type:b,tag:c,props:{className:[d,i,j]},children:[{type:a,value:aM}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:" grep "},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:"q "},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:"e '^amavis."},{type:b,tag:c,props:{className:[d,"important"]},children:[{type:a,value:"*clamav$'"}]},{type:a,value:" \u002Fetc\u002Fgroup\n"}]}]}]},{type:a,value:f},{type:b,tag:D,props:{id:aK},children:[{type:b,tag:m,props:{ariaHidden:E,href:"#change-ownership-on-a-folder-only-if-its-not-what-we-expect",tabIndex:F},children:[{type:b,tag:c,props:{className:[G,H]},children:[]}]},{type:a,value:"Change ownership on a folder "},{type:b,tag:aq,props:{},children:[{type:a,value:"only if"}]},{type:a,value:" its not what we expect"}]},{type:a,value:f},{type:b,tag:q,props:{className:[r]},children:[{type:b,tag:n,props:{className:[B,s]},children:[{type:b,tag:l,props:{},children:[{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:S}]},{type:a,value:"% for es_folder in "},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:"["}]},{type:a,value:aN},{type:b,tag:c,props:{className:[d,R]},children:[{type:a,value:"'\u002Fusr\u002Fshare\u002Felasticsearch\u002Fdata'"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:aO}]},{type:a,value:aN},{type:b,tag:c,props:{className:[d,R]},children:[{type:a,value:"'\u002Fvar\u002Flib\u002Felasticsearch'"}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:"]"}]},{type:a,value:" %"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:T}]},{type:a,value:"\nchown "},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:"R app"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:"user"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:"app"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:"user "},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:S}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:S}]},{type:a,value:" es_folder "},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:T}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:T}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:aa},{type:b,tag:c,props:{className:[d,i,j]},children:[{type:a,value:ab}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:u},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:z},{type:b,tag:c,props:{className:[d,i,j]},children:[{type:a,value:"onlyif"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:z},{type:b,tag:c,props:{className:[d,R]},children:[{type:a,value:"\"test `stat -c %G {{ es_folder }}` != app-user\""}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:S}]},{type:a,value:"% endfor %"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:T}]},{type:a,value:f}]}]}]}]},dir:"\u002Fblog\u002F2015\u002F03",path:"\u002Fblog\u002F2015\u002F03\u002Fuseful-gnulinux-truth-tests",extension:$,slug:"useful-gnulinux-truth-tests",createdAt:aP,updatedAt:aP,category:A,prettyfiedTemporalDate:{prettified:"Tuesday, March 10, 2015",temporalDate:"2015-03-10"}},{locale:Y,title:"Encapsulate a LDAP DN string using Arrays in PHP",canonical:"https:\u002F\u002Frenoirboulanger.com\u002Fblog\u002F2013\u002F04\u002Fencapsulate-a-ldap-dn-string-using-an-array-in-php\u002F",status:Z,revising:J,caption:p,caracteresBizzares:p,gallery:p,migrateCode:J,migrateImages:p,migrateLinks:p,created:"2013-04-01",updated:"2013-04-02",categories:[A],tags:["techniques",ac,"web"],excerpt:"While I was writing an authentication and privileges assignation mechanism using information provided by an ActiveDirectory's LDAP DN string into my project's web application, I realized that there was no documented way to extract information from it. This snippet is about reading a complex DN string, and \"explode\" it into a manageable PHP Array.",toc:[{depth:U,text:aQ},{depth:U,text:aR},{depth:U,text:aS},{depth:U,text:aT}],body:{type:N,children:[{type:b,tag:g,props:{},children:[{type:a,value:"During a project I had to fork privileges assignation logic with information coming from an LDAP server. Since the DN string representing users can be very different for each user: their affiliations and roles. I had to find ways to interpret sub-parts of that string to figure out what privileges to attach to them."}]},{type:a,value:f},{type:b,tag:g,props:{},children:[{type:a,value:"My snippet's purpose is to get the capability to get a subset of that LDAP DN string, assuming that the first index is more precise than the last, but concatenated would give the full context."}]},{type:a,value:f},{type:b,tag:g,props:{},children:[{type:a,value:"While I was trying to find already made function that explodes that string into manageable arrays in PHP, I realized that there was none. I then decided to contribute it as "},{type:b,tag:m,props:{title:aU,href:aV,target:t},children:[{type:a,value:aW}]},{type:a,value:Q}]},{type:a,value:f},{type:a,value:f},{type:b,tag:g,props:{},children:[{type:a,value:V}]},{type:a,value:W},{type:b,tag:X,props:{},children:[{type:a,value:aQ}]},{type:a,value:"\nAs a reminder, an LDAP DN string looks like the following:\n"},{type:b,tag:n,props:{lang:"bash"},children:[{type:a,value:"  CN=username,OU=UNITNAME,OU=Region,OU=Country,DC=subdomain,DC=domain,DC=com\n"}]},{type:a,value:f},{type:b,tag:g,props:{},children:[{type:a,value:"In such a string, we get basically everything a user may inherit from:"}]},{type:a,value:f},{type:b,tag:ar,props:{},children:[{type:a,value:ad},{type:b,tag:O,props:{},children:[{type:a,value:"Group assignation"}]},{type:a,value:ad},{type:b,tag:O,props:{},children:[{type:a,value:"Organization domain (either DNS or Microsoft's idea of a \"domain\" (aka. \"Active Directory\"))"}]},{type:a,value:ad},{type:b,tag:O,props:{},children:[{type:a,value:"etc."}]},{type:a,value:f}]},{type:a,value:f},{type:b,tag:g,props:{},children:[{type:a,value:"The main idea is to deal with different logic based on changes or assignment. The DN has all we need."}]},{type:a,value:f},{type:b,tag:g,props:{},children:[{type:a,value:"Reading the data from it can be done using successive "},{type:b,tag:l,props:{},children:[{type:a,value:"explode"}]},{type:a,value:" on the "},{type:b,tag:l,props:{},children:[{type:a,value:"="}]},{type:a,value:" and the "},{type:b,tag:l,props:{},children:[{type:a,value:aO}]},{type:a,value:". But How about to use the implicit hierarchy the string conveys."}]},{type:a,value:f},{type:b,tag:g,props:{},children:[{type:a,value:"My objective was to read the previously shown DN string, and parse a manageable array that would look like this:`"}]},{type:a,value:f},{type:b,tag:n,props:{lang:ac},children:[{type:a,value:"    array(\n        'CN' =\u003E array(\"username\"),\n        'OU' =\u003E array(\"UNITNAME\",\"Region\",\"Country\"),\n        'DC' =\u003E array (\"subdomain\",\"domain\",\"com\")\n    );\n"}]},{type:a,value:f},{type:b,tag:g,props:{},children:[{type:a,value:V}]},{type:a,value:W},{type:b,tag:X,props:{},children:[{type:a,value:aR}]},{type:a,value:"\nAssuming we want to work with changes in the OU field. We could do as:\n"},{type:b,tag:n,props:{lang:ac},children:[{type:a,value:"find($userId); \u002F\u002F $user instanceof User\n\n\u002F\u002F This is coming from the LDAP\n$dn= 'CN=username,OU=UNITNAME,OU=Region,OU=Country,DC=subdomain,DC=domain,DC=com';\n\n$wrapper = parseLdapDn($dn);\n\u002F\u002F We are working with \"UNITNAME\" but there can be other ones\nswitch($wrapper['OU'][0]){\n    case 'UNITNAME':\n        \u002F\u002F Specific logic or authorization setters\n        $user-\u003EaddRole('ROLE_UNITNAME');\n    break;\n\n    default:\n      \u002F\u002F Default behavior, in case we did not grasp\n    break;\n}\n\n\u002F\u002F And so on...\n"}]},{type:a,value:f},{type:b,tag:g,props:{},children:[{type:a,value:"In this example I added a role using Symfony2's method on a Doctrine2 provided object. But you may see other use cases."}]},{type:a,value:f},{type:b,tag:g,props:{},children:[{type:a,value:V}]},{type:a,value:W},{type:b,tag:X,props:{},children:[{type:a,value:aS}]},{type:a,value:f},{type:b,tag:"script",props:{src:"https:\u002F\u002Fgist.github.com\u002Frenoirb\u002F3152719.js"},children:[]},{type:a,value:"\nI also published it as "},{type:b,tag:m,props:{title:aU,href:aV,target:t},children:[{type:a,value:aW}]},{type:a,value:".\n"},{type:b,tag:g,props:{},children:[{type:a,value:V}]},{type:a,value:W},{type:b,tag:X,props:{},children:[{type:a,value:aT}]},{type:a,value:"\nIf you have other questions or suggestions, let me know."}]},dir:"\u002Fblog\u002F2013\u002F04",path:"\u002Fblog\u002F2013\u002F04\u002Fencapsulate-a-ldap-dn-string-using-an-array-in-php",extension:$,slug:"encapsulate-a-ldap-dn-string-using-an-array-in-php",createdAt:aX,updatedAt:aX,category:A,prettyfiedTemporalDate:{prettified:"Monday, April 1, 2013",temporalDate:"2013-04-01"}}],taxonomyKey:A,taxonomy:{key:A}}],fetch:[],mutations:void 0}}("text","element","span","token","punctuation","\n","p",":","key","atrule","-","code","a","pre","---",false,"div","nuxt-content-highlight","line-numbers","_blank","\n    ","nofollow","noopener","noreferrer","\n        "," ","snippet","language-yaml",2,"h2","true",-1,"icon","icon-link","unchanged",true,"number","prefix","line","root","li","language-bash",".","string","{","}",3," ","­\n","h3","en-CA","publish","0000",".md","\n  ","cmd.run","php","\n\t","linux","salt-stack","cloud-computing","get-openstack-instance-detail-using-salt","Get OpenStack instance detail using Salt","what-data-you-can-get","What data you can get","what-does-the-script-do","What does the script do?","install","Install","https:\u002F\u002Fgithub.com\u002Fsaltstack\u002Fsalt-contrib\u002Fblob\u002Fmaster\u002Fgrains\u002Fec2_info.py","strong","ul","security-groups","7c55","4dd3","a00000000000\n","app1","availability_zone","1","\n            vda\n        ","name","...","\n        None\n    ","http:\u002F\u002Fdocs.openstack.org\u002Fadmin-guide-cloud\u002Fcontent\u002Fsection_metadata-service.html","coord","inserted","2024-10-24T19:50:04.932Z","A common task while writing server configuration management manifests is to make sure that some enforcements are run in specific situations.","add-group-additional-membership-to-user","Add group additional membership to user","change-ownership-on-a-folder-only-if-its-not-what-we-expect","usermod -a -G amavis clamav","unless","\n      ",",","2024-10-24T19:50:04.930Z","The basics","How to use","Snippet","That is all folks","Parse, and format a DN string to Array ","http:\u002F\u002Fwww.php.net\u002Fmanual\u002Fen\u002Ffunction.ldap-explode-dn.php#109482","a comment on the PHP.net website","2024-10-24T19:50:04.924Z")));