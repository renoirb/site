__NUXT_JSONP__("/blog/2015/08/thoughts-improving-load-resiliency-cms-driven-websites", (function(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,A,B,C,D,E,F,G,H,I,J,K,L,M,N){return {data:[{},{},{},{canonical:x,content:{title:"Thoughts about improving load resiliency for CMS driven Websites",locale:m,created:"2015-08-12T00:00:00.000Z",updated:"2023-02-18T00:00:00.000Z",canonical:x,status:"publish",revising:f,migrateLinks:true,migrateImages:f,gallery:f,caption:f,categories:[y],tags:["vulgarization","development"],keywords:[g,z,"Django","Kuma"],coverImage:{src:A,alt:B,text:"When we think about it, except minor details such as the current user’s info, a web page is pretty much the same for everyone.\nThere has to be a way to structure Front-End code to make a clear\nseparation and leverage more caching.\nThe case of Mozilla’s MDN is most certainly not the first one.\n"},preamble:{text:"This was written at the time I was collaborating with *Mozilla* on the MDN project\non [a discussion about scaling the site][link-scale-mdn].\nIt was related to a contract I was working on to help on Mozilla’s Compatibility tables,\nbased on my [own research about **Compatibility Tables** for **WebPlatform Docs**][wpd-compatables].\n[wpd-compatables]: https:\u002F\u002Fwebplatform.github.io\u002Fdocs\u002FWPD\u002FProjects\u002FCompaTables\u002F \"WebPlatform browser compatibility support table\"\n[link-scale-mdn]: https:\u002F\u002Fgroups.google.com\u002Fd\u002Fmsg\u002Fmozilla.dev.mdn\u002F4_bFfpyvYMk\u002F8c6S6cblZ4kJ \"RE: Proposal to help scale MDN\"\n"},excerpt:"How about we re-imagine how to serve content from a CMS and leverage HTTP caching? How could it be done?",toc:[{id:C,depth:n,text:D},{id:E,depth:n,text:F},{id:G,depth:n,text:H}],body:{type:o,children:[{type:b,tag:d,props:{},children:[{type:a,value:"The following is an article I wrote based on a "},{type:b,tag:e,props:{href:"https:\u002F\u002Fgroups.google.com\u002Fd\u002Fmsg\u002Fmozilla.dev.mdn\u002F4_bFfpyvYMk\u002FKkO0alAfAgAJ",rel:[h,i,j],target:k},children:[{type:a,value:"note I sent to the Mozilla\nDeveloper Network mailing list"}]},{type:a,value:" about an idea that crossed my mind to help\nscale a CMS driven website."}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"I'm convinced i am not the first one who came out with a similar idea, but I\nthought it would be useful to share anyway."}]},{type:a,value:c},{type:b,tag:p,props:{id:C},children:[{type:b,tag:e,props:{href:"#whats-common-on-a-cms-driven-website",ariaHidden:q,tabIndex:r},children:[{type:b,tag:s,props:{className:[t,u]},children:[]}]},{type:a,value:D}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"What affects the page load is what happens in the backend before getting HTML\nback to the web browser. Sometimes its about converting the text stored in the\ndatabase back into HTML, making some specific views, and the list can go on and\non."}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Problem is that we are spending a lot of CPU cycles to end up serving time and\ntime again the same content, unique for each user when about 90% the generated\ncontent could be exactly the same for everybody."}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"with web apps is that we make backend servers generate HTML as if it was unique\nwhen, in truth, most of it could be cached."}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"What if we could make a separation between what's common, and use caching and\nserve it to everybody."}]},{type:a,value:c},{type:b,tag:p,props:{id:E},children:[{type:b,tag:e,props:{href:"#how-http-cache-works-roughly",ariaHidden:q,tabIndex:r},children:[{type:b,tag:s,props:{className:[t,u]},children:[]}]},{type:a,value:F}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Regardless of what software does it: Squid, Varnish, NGINX, Zeus, caching is\ndone the same way."}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"In the end, the HTTP caching layer basically keeps in RAM generated HTTP\nResponse body and keeps in memory based on the headers it had when it passed it\nthrough to the original request. Only GET Responses, "},{type:b,tag:l,props:{},children:[{type:a,value:"without cookies"}]},{type:a,value:", are\ncacheable. Other response body coming from a ["},{type:b,tag:v,props:{},children:[{type:a,value:"PUT"}]},{type:a,value:I},{type:b,tag:v,props:{},children:[{type:a,value:"DELETE"}]},{type:a,value:I},{type:b,tag:v,props:{},children:[{type:a,value:"POST"}]},{type:a,value:"] request\naren't."}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"To come back on my previous example, what part is unique in the the current user\ncompared to what the anonymous visitor gets on a documentation Website page."}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"What does a Website view serves us then? The content of the page, the \"chrome\"\n(what's always there), Links to account settings, edit, or visualize details for\nthe current page, account settings, the username, link to logout."}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"It means we are making unique content for things that could be cached and\nwasting cycles."}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Even then, most of the content is cacheable because they would generally be with\nthe same paths in the CMS."}]},{type:a,value:c},{type:b,tag:p,props:{id:G},children:[{type:b,tag:e,props:{href:"#how-about-we-separate-dynamic-from-static",ariaHidden:q,tabIndex:r},children:[{type:b,tag:s,props:{className:[t,u]},children:[]}]},{type:a,value:H}]},{type:a,value:c},{type:b,tag:"app-image",props:{src:"~\u002Fassets\u002Fcontent\u002Fblog\u002F2015\u002F10\u002F2015-09-21-Running-MDN-and-BrowserCompat.png",alt:"Experimenting with Django\u002FKuma and making HTML Partial URLs",figcaption:" "},children:[{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"An example of running a presentation only HTML partial serving specialized service."}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"We could make "},{type:b,tag:e,props:{href:"https:\u002F\u002Fgithub.com\u002Fmdn\u002Fbrowsercompat",rel:[h,i,j],target:k,title:"The Browser Compatibility API was a project to support compatibility data on the Mozilla Developer Network. "},children:[{type:b,tag:w,props:{},children:[{type:a,value:g}]},{type:a,value:"’s "},{type:b,tag:l,props:{},children:[{type:a,value:"BrowserCompat"}]},{type:a,value:" API"}]},{type:a,value:" where we could\nleverage to fill in compatibiliby table back into MDN.\nThis screenshot dates back from 2015."}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"This makes me wonder if we could improve site resiliency by leveraging HTTP\ncaching, strip off "},{type:b,tag:l,props:{},children:[{type:a,value:"any cookies"}]},{type:a,value:", and factor out what's unique on a page so that\nwe get the same output for any context."}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"As for the contextual parts of the site 'chrome', how about we expose a\ncontext-root which would take care of serving dynamically generated HTML to use\nas partials."}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"One way of doing it would be to make that context-root generate simple HTML\nstrings that we can pass to a JavaScript manager that'll convert it into DOM and\ninject it in the 'chrome'."}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Since we can make cookies to be isolated to specific context-roots, we can keep\nthe statefulness of the session on MDN and have a clear separation of what's\ndynamic and what's not."}]}]},text:"---\ntitle: Thoughts about improving load resiliency for CMS driven Websites\nlocale: en-CA\ncreated: 2015-08-12\nupdated: 2023-02-18\ncanonical: \u003E-\n  https:\u002F\u002Frenoirboulanger.com\u002Fblog\u002F2015\u002F08\u002Fthoughts-improving-load-resiliency-cms-driven-websites\u002F\nstatus: publish\nrevising: false\nmigrateLinks: true\nmigrateImages: false\ngallery: false\ncaption: false\ncategories:\n  - web-integration-review\ntags:\n  - vulgarization\n  - development\nkeywords:\n  - MDN\n  - Mozilla\n  - Django\n  - Kuma\ncoverImage:\n  src: ~\u002Fassets\u002Fcontent\u002Fblog\u002F2015\u002F08\u002F2015-08-12-What-makes-a-page-unique-1024x921.png\n  alt: |\n    What makes a content site page unique from what an anonymous visitor can get?\n  text: |\n    When we think about it, except minor details such as the current user’s info, a web page is pretty much the same for everyone.\n    There has to be a way to structure Front-End code to make a clear\n    separation and leverage more caching.\n    The case of Mozilla’s MDN is most certainly not the first one.\npreamble:\n  text: |\n    This was written at the time I was collaborating with *Mozilla* on the MDN project\n    on [a discussion about scaling the site][link-scale-mdn].\n    It was related to a contract I was working on to help on Mozilla’s Compatibility tables,\n    based on my [own research about **Compatibility Tables** for **WebPlatform Docs**][wpd-compatables].\n    [wpd-compatables]: https:\u002F\u002Fwebplatform.github.io\u002Fdocs\u002FWPD\u002FProjects\u002FCompaTables\u002F \"WebPlatform browser compatibility support table\"\n    [link-scale-mdn]: https:\u002F\u002Fgroups.google.com\u002Fd\u002Fmsg\u002Fmozilla.dev.mdn\u002F4_bFfpyvYMk\u002F8c6S6cblZ4kJ \"RE: Proposal to help scale MDN\"\nexcerpt: \u003E-\n  How about we re-imagine how to serve content from a CMS and leverage HTTP\n  caching? How could it be done?\n---\n\nThe following is an article I wrote based on a [note I sent to the Mozilla\nDeveloper Network mailing list][0] about an idea that crossed my mind to help\nscale a CMS driven website.\n\nI'm convinced i am not the first one who came out with a similar idea, but I\nthought it would be useful to share anyway.\n\n## What's common on a CMS driven Website?\n\nWhat affects the page load is what happens in the backend before getting HTML\nback to the web browser. Sometimes its about converting the text stored in the\ndatabase back into HTML, making some specific views, and the list can go on and\non.\n\nProblem is that we are spending a lot of CPU cycles to end up serving time and\ntime again the same content, unique for each user when about 90% the generated\ncontent could be exactly the same for everybody.\n\nwith web apps is that we make backend servers generate HTML as if it was unique\nwhen, in truth, most of it could be cached.\n\nWhat if we could make a separation between what's common, and use caching and\nserve it to everybody.\n\n## How HTTP cache works, roughly\n\nRegardless of what software does it: Squid, Varnish, NGINX, Zeus, caching is\ndone the same way.\n\nIn the end, the HTTP caching layer basically keeps in RAM generated HTTP\nResponse body and keeps in memory based on the headers it had when it passed it\nthrough to the original request. Only GET Responses, _without cookies_, are\ncacheable. Other response body coming from a \\[`PUT`, `DELETE`, `POST`\\] request\naren't.\n\nTo come back on my previous example, what part is unique in the the current user\ncompared to what the anonymous visitor gets on a documentation Website page.\n\nWhat does a Website view serves us then? The content of the page, the \"chrome\"\n(what's always there), Links to account settings, edit, or visualize details for\nthe current page, account settings, the username, link to logout.\n\nIt means we are making unique content for things that could be cached and\nwasting cycles.\n\nEven then, most of the content is cacheable because they would generally be with\nthe same paths in the CMS.\n\n## How about we separate dynamic from static?\n\n\u003Capp-image src=\"~\u002Fassets\u002Fcontent\u002Fblog\u002F2015\u002F10\u002F2015-09-21-Running-MDN-and-BrowserCompat.png\" alt=\"Experimenting with Django\u002FKuma and making HTML Partial URLs\" figcaption=\" \"\u003E\n\nAn example of running a presentation only HTML partial serving specialized service.\n\nWe could make [**MDN**’s _BrowserCompat_ API][browsercompat-api] where we could\nleverage to fill in compatibiliby table back into MDN.\nThis screenshot dates back from 2015.\n\n\u003C\u002Fapp-image\u003E\n\nThis makes me wonder if we could improve site resiliency by leveraging HTTP\ncaching, strip off _any cookies_, and factor out what's unique on a page so that\nwe get the same output for any context.\n\nAs for the contextual parts of the site 'chrome', how about we expose a\ncontext-root which would take care of serving dynamically generated HTML to use\nas partials.\n\nOne way of doing it would be to make that context-root generate simple HTML\nstrings that we can pass to a JavaScript manager that'll convert it into DOM and\ninject it in the 'chrome'.\n\nSince we can make cookies to be isolated to specific context-roots, we can keep\nthe statefulness of the session on MDN and have a clear separation of what's\ndynamic and what's not.\n\n[0]: https:\u002F\u002Fgroups.google.com\u002Fd\u002Fmsg\u002Fmozilla.dev.mdn\u002F4_bFfpyvYMk\u002FKkO0alAfAgAJ\n[browsercompat-api]:\n  https:\u002F\u002Fgithub.com\u002Fmdn\u002Fbrowsercompat\n  'The Browser Compatibility API was a project to support compatibility data on the Mozilla Developer Network. '\n",dir:"\u002Fblog\u002F2015\u002F08",path:"\u002Fblog\u002F2015\u002F08\u002Fthoughts-improving-load-resiliency-cms-driven-websites",extension:".md",slug:J,createdAt:K,updatedAt:K,category:y},coverImage:{toc:[],body:{type:o,children:[{type:b,tag:d,props:{},children:[{type:a,value:"When we think about it, except minor details such as the current user’s info, a web page is pretty much the same for everyone.\nThere has to be a way to structure Front-End code to make a clear\nseparation and leverage more caching.\nThe case of Mozilla’s "},{type:b,tag:L,props:{lang:M,title:N},children:[{type:a,value:g}]},{type:a,value:" is most certainly not the first one."}]}]},text:"When we think about it, except minor details such as the current user’s info, a web page is pretty much the same for everyone.\nThere has to be a way to structure Front-End code to make a clear\nseparation and leverage more caching.\nThe case of Mozilla’s \u003Cabbr lang=\"en\" title=\"Mozilla Developer Network\"\u003EMDN\u003C\u002Fabbr\u003E is most certainly not the first one.\n",src:A,alt:B},month:"08",next:{title:"Recover Discourse from a backup, adjust domain name",locale:m,path:"\u002Fblog\u002F2015\u002F11\u002Frecover-discourse-backup-change-domain-name",slug:"recover-discourse-backup-change-domain-name"},preamble:{toc:[],body:{type:o,children:[{type:b,tag:d,props:{},children:[{type:a,value:"This was written at the time I was collaborating with "},{type:b,tag:l,props:{},children:[{type:a,value:z}]},{type:a,value:" on the "},{type:b,tag:L,props:{lang:M,title:N},children:[{type:a,value:g}]},{type:a,value:" project\non "},{type:b,tag:e,props:{href:"https:\u002F\u002Fgroups.google.com\u002Fd\u002Fmsg\u002Fmozilla.dev.mdn\u002F4_bFfpyvYMk\u002F8c6S6cblZ4kJ",rel:[h,i,j],target:k,title:"RE: Proposal to help scale MDN"},children:[{type:a,value:"a discussion about scaling the site"}]},{type:a,value:".\nIt was related to a contract I was working on to help on Mozilla’s Compatibility tables,\nbased on my "},{type:b,tag:e,props:{href:"https:\u002F\u002Fwebplatform.github.io\u002Fdocs\u002FWPD\u002FProjects\u002FCompaTables\u002F",rel:[h,i,j],target:k,title:"WebPlatform browser compatibility support table"},children:[{type:a,value:"own research about "},{type:b,tag:w,props:{},children:[{type:a,value:"Compatibility Tables"}]},{type:a,value:" for "},{type:b,tag:w,props:{},children:[{type:a,value:"WebPlatform Docs"}]}]},{type:a,value:"."}]}]},text:"This was written at the time I was collaborating with *Mozilla* on the \u003Cabbr lang=\"en\" title=\"Mozilla Developer Network\"\u003EMDN\u003C\u002Fabbr\u003E project\non [a discussion about scaling the site][link-scale-mdn].\nIt was related to a contract I was working on to help on Mozilla’s Compatibility tables,\nbased on my [own research about **Compatibility Tables** for **WebPlatform Docs**][wpd-compatables].\n[wpd-compatables]: https:\u002F\u002Fwebplatform.github.io\u002Fdocs\u002FWPD\u002FProjects\u002FCompaTables\u002F \"WebPlatform browser compatibility support table\"\n[link-scale-mdn]: https:\u002F\u002Fgroups.google.com\u002Fd\u002Fmsg\u002Fmozilla.dev.mdn\u002F4_bFfpyvYMk\u002F8c6S6cblZ4kJ \"RE: Proposal to help scale MDN\"\n"},prettyfiedTemporalDate:{prettified:"Wednesday, August 12, 2015",temporalDate:"2015-08-12"},prev:{title:"Managing my PGP\u002FOpenPGP keys and share across many machines",locale:m,path:"\u002Fblog\u002F2015\u002F08\u002Fmanaging-pgp-private-keys-share-across-machines",slug:"managing-pgp-private-keys-share-across-machines"},slug:J,year:"2015"}],fetch:[],mutations:void 0}}("text","element","\n","p","a",false,"MDN","nofollow","noopener","noreferrer","_blank","em","en-CA",2,"root","h2","true",-1,"span","icon","icon-link","code","strong","https:\u002F\u002Frenoirboulanger.com\u002Fblog\u002F2015\u002F08\u002Fthoughts-improving-load-resiliency-cms-driven-websites\u002F","web-integration-review","Mozilla","~\u002Fassets\u002Fcontent\u002Fblog\u002F2015\u002F08\u002F2015-08-12-What-makes-a-page-unique-1024x921.png","What makes a content site page unique from what an anonymous visitor can get?\n","whats-common-on-a-cms-driven-website","What's common on a CMS driven Website?","how-http-cache-works-roughly","How HTTP cache works, roughly","how-about-we-separate-dynamic-from-static","How about we separate dynamic from static?",", ","thoughts-improving-load-resiliency-cms-driven-websites","2024-10-24T19:50:04.934Z","abbr","en","Mozilla Developer Network")));