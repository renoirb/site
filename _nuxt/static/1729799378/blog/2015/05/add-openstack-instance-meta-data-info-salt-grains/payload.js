__NUXT_JSONP__("/blog/2015/05/add-openstack-instance-meta-data-info-salt-grains", (function(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,_,$,aa,ab,ac,ad,ae,af,ag,ah,ai,aj,ak,al,am,an,ao,ap,aq){return {data:[{},{},{},{canonical:P,content:{title:"Add OpenStack instance meta-data info in your salt grains",locale:N,created:"2015-05-22T00:00:00.000Z",updated:"2023-11-17T00:00:00.000Z",canonical:P,status:"publish",revising:C,migrateLinks:true,migrateImages:C,gallery:C,caption:C,categories:[Q],tags:["linux","operations","salt-stack","cloud-computing","open-source"],keywords:["Ansible","Infrastructure as Code"],preamble:{text:R},coverImage:{src:S,alt:T,text:"Open Stack NOVA client is leveraging an internal HTTP API to display data we can\nconsume from the CLI.\nThe present article shows how to add data from OpenStack into Salt Stack.\n"},excerpt:"Ever wanted to target salt states based on data only the underlying OpenStack cluster knows. Here’s how I did it.",toc:[{id:U,depth:D,text:V},{id:W,depth:D,text:X},{id:Y,depth:D,text:Z},{id:_,depth:D,text:$}],body:{type:E,children:[{type:b,tag:j,props:{},children:[{type:a,value:"During a work session on my salt-states for WebPlatform.org I wanted to shape be\nable to query the OpenStack cluster meta-data so that I can adjust more\nefficiently my salt configuration."}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"What are grains? Grains are structured data that describes what a minion has\nsuch as which version of GNU\u002FLinux its running, what are the network adapters,\netc."}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"The following is a Python script that adds data in Salt Stack' internal database\ncalled grains."}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"I have to confess that I didn't write the script but adapted it to work within\nan OpenStack cluster. More precisely on DreamHost's DreamCompute cluster. The\noriginal script came from "},{type:b,tag:n,props:{href:"https:\u002F\u002Fgithub.com\u002Fsaltstack\u002Fsalt-contrib",rel:[s,t,u],target:v},children:[{type:a,value:"saltstack\u002Fsalt-contrib"}]},{type:a,value:" and the original file was\n"},{type:b,tag:n,props:{href:aa,rel:[s,t,u],target:v},children:[{type:a,value:"ec2_info.py"}]},{type:a,value:" to read data from EC2."}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"The "},{type:b,tag:n,props:{href:aa,rel:[s,t,u],target:v},children:[{type:a,value:"original script"}]},{type:a,value:" wasn't getting any data in the cluster. Most likely due\nto API changes and that EC2 API exposes dynamic meta-data that the\nDreamCompute\u002FOpenStack cluster don't."}]},{type:a,value:f},{type:b,tag:"rb-notice-box",props:{variant:"info",className:["my-5"]},children:[{type:a,value:f},{type:b,tag:"strong",props:{slot:"header"},children:[{type:a,value:"Script source"}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"The article’s source script is available on GitHub as a Python script we can\ninsert into SaltStack as a grain"}]},{type:a,value:f},{type:b,tag:"ul",props:{},children:[{type:a,value:f},{type:b,tag:"li",props:{},children:[{type:b,tag:n,props:{href:"https:\u002F\u002Fgithub.com\u002Fwebplatform\u002Fsalt-states\u002Fblob\u002Fmaster\u002F_grains\u002Fdreamcompute.py",rel:[s,t,u],target:v},children:[{type:a,value:"github.com\u002Fwebplatform\u002Fsalt-states"}]}]},{type:a,value:f}]},{type:a,value:f}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"In the end, I edited the file to make it work on DreamCompute and also truncated\nsome data that the grains subsystem already has."}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"My original objective was to get a list of "},{type:b,tag:l,props:{},children:[{type:a,value:ab}]},{type:a,value:" the VM was\nassigned. Unfortunately the API doesn't give that information yet. Hopefully\nI'll find a way to get that information some day."}]},{type:a,value:f},{type:b,tag:F,props:{id:U},children:[{type:b,tag:n,props:{href:"#get-openstack-instance-detail-using-salt",ariaHidden:G,tabIndex:H},children:[{type:b,tag:c,props:{className:[I,J]},children:[]}]},{type:a,value:V}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"Locally"}]},{type:a,value:f},{type:b,tag:o,props:{className:[p]},children:[{type:b,tag:q,props:{className:[r,K]},children:[{type:b,tag:l,props:{},children:[{type:a,value:"salt-call grains.get dreamcompute:uuid\n"}]}]}]},{type:a,value:f},{type:b,tag:o,props:{className:[p]},children:[{type:b,tag:q,props:{className:[r,L]},children:[{type:b,tag:l,props:{},children:[{type:b,tag:c,props:{className:[d,g,h]},children:[{type:a,value:"local"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:a,value:"\n    10a4f390"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:ac},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:ad},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:O},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:ae}]}]}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"Or for another machine"}]},{type:a,value:f},{type:b,tag:o,props:{className:[p]},children:[{type:b,tag:q,props:{className:[r,K]},children:[{type:b,tag:l,props:{},children:[{type:a,value:"salt app1 grains.get dreamcompute:uuid\n"}]}]}]},{type:a,value:f},{type:b,tag:o,props:{className:[p]},children:[{type:b,tag:q,props:{className:[r,L]},children:[{type:b,tag:l,props:{},children:[{type:b,tag:c,props:{className:[d,g,h]},children:[{type:a,value:af}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:a,value:"\n    510f5f24"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:"217b"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:"4fd2"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:O},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:"f00000000000\n"}]}]}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"What size did we create a particular VM?"}]},{type:a,value:f},{type:b,tag:o,props:{className:[p]},children:[{type:b,tag:q,props:{className:[r,K]},children:[{type:b,tag:l,props:{},children:[{type:a,value:"salt app1 grains.get dreamcompute:instance_type\n"}]}]}]},{type:a,value:f},{type:b,tag:o,props:{className:[p]},children:[{type:b,tag:q,props:{className:[r,L]},children:[{type:b,tag:l,props:{},children:[{type:b,tag:c,props:{className:[d,g,h]},children:[{type:a,value:af}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:a,value:"\n    lightspeed\n"}]}]}]},{type:a,value:f},{type:b,tag:F,props:{id:W},children:[{type:b,tag:n,props:{href:"#what-data-you-can-get",ariaHidden:G,tabIndex:H},children:[{type:b,tag:c,props:{className:[I,J]},children:[]}]},{type:a,value:X}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"Here is a sample of the grain data that will be added to every salt minion you\nmanage."}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"You might notice that some data will be repeated such as the 'hostname', but the\nrest can be very useful if you want to use the data within your configuration\nmanag"}]},{type:a,value:f},{type:b,tag:o,props:{className:[p]},children:[{type:b,tag:q,props:{className:[r,L]},children:[{type:b,tag:l,props:{},children:[{type:b,tag:c,props:{className:[d,g,h]},children:[{type:a,value:"dreamcompute"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:a,value:x},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:x},{type:b,tag:c,props:{className:[d,g,h]},children:[{type:a,value:ag}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:a,value:"\n        iad"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:b,tag:c,props:{className:[d,z]},children:[{type:a,value:ah}]},{type:a,value:x},{type:b,tag:c,props:{className:[d,g,h]},children:[{type:a,value:"block_device_mapping"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:a,value:w},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:w},{type:b,tag:c,props:{className:[d,g,h]},children:[{type:a,value:"ami"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:a,value:ai},{type:b,tag:c,props:{className:[d,g,h]},children:[{type:a,value:"ebs0"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:a,value:"\n            \u002Fdev\u002Fvdb\n        "},{type:b,tag:c,props:{className:[d,g,h]},children:[{type:a,value:"ebs1"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:a,value:ai},{type:b,tag:c,props:{className:[d,g,h]},children:[{type:a,value:E}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:a,value:"\n            \u002Fdev\u002Fvda\n    "},{type:b,tag:c,props:{className:[d,g,h]},children:[{type:a,value:"hostname"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:a,value:"\n        salt.novalocal\n    "},{type:b,tag:c,props:{className:[d,g,h]},children:[{type:a,value:"instance_action"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:a,value:"\n        none\n    "},{type:b,tag:c,props:{className:[d,g,h]},children:[{type:a,value:"instance_id"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:a,value:"\n        i"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:b,tag:c,props:{className:[d,z]},children:[{type:a,value:"00000000"}]},{type:a,value:x},{type:b,tag:c,props:{className:[d,g,h]},children:[{type:a,value:"instance_type"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:a,value:"\n        lightspeed\n    "},{type:b,tag:c,props:{className:[d,g,h]},children:[{type:a,value:"launch_index"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:a,value:w},{type:b,tag:c,props:{className:[d,z]},children:[{type:a,value:"0"}]},{type:a,value:x},{type:b,tag:c,props:{className:[d,g,h]},children:[{type:a,value:"local_ipv4"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:a,value:"\n        10.10.10.11\n    "},{type:b,tag:c,props:{className:[d,g,h]},children:[{type:a,value:aj}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:a,value:"\n        salt\n    "},{type:b,tag:c,props:{className:[d,g,h]},children:[{type:a,value:"network_config"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:a,value:w},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:w},{type:b,tag:c,props:{className:[d,g,h]},children:[{type:a,value:"content_path"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:a,value:"\n            \u002Fcontent\u002F0000\n        "},{type:b,tag:c,props:{className:[d,g,h]},children:[{type:a,value:aj}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:a,value:"\n            network_config\n    "},{type:b,tag:c,props:{className:[d,g,h]},children:[{type:a,value:"placement"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:a,value:w},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:w},{type:b,tag:c,props:{className:[d,g,h]},children:[{type:a,value:ag}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:a,value:"\n            iad"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:b,tag:c,props:{className:[d,z]},children:[{type:a,value:ah}]},{type:a,value:x},{type:b,tag:c,props:{className:[d,g,h]},children:[{type:a,value:"public_ipv4"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:a,value:"\n        203.0.113.11\n    "},{type:b,tag:c,props:{className:[d,g,h]},children:[{type:a,value:"public_keys"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:a,value:w},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:m}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:w},{type:b,tag:c,props:{className:[d,g,h]},children:[{type:a,value:"someuser"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:a,value:"\n            ssh"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:"rsa "},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:ak}]},{type:a,value:"an rsa public key"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:ak}]},{type:a,value:" someuser"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:"comment@example.org\n    "},{type:b,tag:c,props:{className:[d,g,h]},children:[{type:a,value:"ramdisk_id"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:a,value:al},{type:b,tag:c,props:{className:[d,g,h]},children:[{type:a,value:"reservation_id"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:a,value:"\n        r"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:b,tag:c,props:{className:[d,z]},children:[{type:a,value:"33333333"}]},{type:a,value:x},{type:b,tag:c,props:{className:[d,g,h]},children:[{type:a,value:ab}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:a,value:al},{type:b,tag:c,props:{className:[d,g,h]},children:[{type:a,value:"uuid"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:a,value:"\n        10a4f390"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:ac},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:ad},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:O},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:ae}]}]}]},{type:a,value:f},{type:b,tag:F,props:{id:Y},children:[{type:b,tag:n,props:{href:"#what-does-the-script-do",ariaHidden:G,tabIndex:H},children:[{type:b,tag:c,props:{className:[I,J]},children:[]}]},{type:a,value:Z}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"The script basically scrapes OpenStack meta-data service and serializes into\nsaltstack grains system the data it gets."}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:b,tag:n,props:{href:am,rel:[s,t,u],target:v},children:[{type:a,value:"OpenStack's meta-data service"}]},{type:a,value:" is similar to what you'd get from AWS, but\ndoesn't expose exactly the same data. This is why I had to adapt the original\nscript."}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"To get data from an instance you simply (really!) need to make an HTTP call to\nan "},{type:b,tag:n,props:{href:am,rel:[s,t,u],target:v},children:[{type:a,value:"internal IP address that OpenStack nova"}]},{type:a,value:" answers. (that’s what the IPv4\naddress starting by "},{type:b,tag:l,props:{},children:[{type:a,value:"169."}]},{type:a,value:" is)"}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"For example, from an AWS\u002FOpenStack VM, you can know the instance hostname by\ndoing"}]},{type:a,value:f},{type:b,tag:o,props:{className:[p]},children:[{type:b,tag:q,props:{className:[r,K]},children:[{type:b,tag:l,props:{},children:[{type:b,tag:c,props:{className:[d,"function"]},children:[{type:a,value:"curl"}]},{type:a,value:" http:\u002F\u002F169.254.169.254\u002Flatest\u002Fmeta-data\u002Fhostname\n\nsalt.novalocal\n"}]}]}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"To know what the script calls, "},{type:b,tag:n,props:{href:"https:\u002F\u002Fgithub.com\u002Fwebplatform\u002Fsalt-states\u002Fcommit\u002F821ca803#diff-6eea2056af3e939361a559b84665c1d97fc9e062f7b7f79910567fc688881056R33",rel:[s,t,u],target:v},children:[{type:a,value:"you can add a line at "},{type:b,tag:l,props:{},children:[{type:a,value:"_call_aws(url)"}]},{type:a,value:"\nmethod"}]},{type:a,value:" ("},{type:b,tag:n,props:{href:"https:\u002F\u002Fgithub.com\u002Fwebplatform\u002Fsalt-states\u002Fcommit\u002F821ca803#diff-6eea2056af3e939361a559b84665c1d97fc9e062f7b7f79910567fc688881056R32-R34",rel:[s,t,u],target:v},children:[{type:a,value:"lines 32-34"}]},{type:a,value:"), like so;"}]},{type:a,value:f},{type:b,tag:o,props:{className:[p]},children:[{type:b,tag:q,props:{className:[r,"language-diff"]},children:[{type:b,tag:l,props:{},children:[{type:a,value:"diff --git a\u002F_grains\u002Fdreamcompute.py b\u002F_grains\u002Fdreamcompute.py\nindex 682235d..c3af659 100644\n"},{type:b,tag:c,props:{className:[d,an]},children:[{type:a,value:"--- a\u002F_grains\u002Fdreamcompute.py"}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,an]},children:[{type:a,value:"+++ b\u002F_grains\u002Fdreamcompute.py"}]},{type:a,value:"\n@@ -25,6 +25,7 @@ def _call_aws(url):\n\n"},{type:b,tag:c,props:{className:[d,y]},children:[{type:b,tag:c,props:{className:[d,A,y]},children:[{type:a,value:M}]},{type:b,tag:c,props:{className:[d,B]},children:[{type:a,value:"    \"\"\"\n"}]},{type:b,tag:c,props:{className:[d,A,y]},children:[{type:a,value:M}]},{type:b,tag:c,props:{className:[d,B]},children:[{type:a,value:"    conn = httplib.HTTPConnection(\"169.254.169.254\", 80, timeout=1)\n"}]}]},{type:b,tag:c,props:{className:[d,"inserted-sign",ao]},children:[{type:b,tag:c,props:{className:[d,A,ao]},children:[{type:a,value:"+"}]},{type:b,tag:c,props:{className:[d,B]},children:[{type:a,value:"    LOG.info('API call to ' + url )\n"}]}]},{type:b,tag:c,props:{className:[d,y]},children:[{type:b,tag:c,props:{className:[d,A,y]},children:[{type:a,value:M}]},{type:b,tag:c,props:{className:[d,B]},children:[{type:a,value:"    conn.request('GET', url)\n"}]},{type:b,tag:c,props:{className:[d,A,y]},children:[{type:a,value:M}]},{type:b,tag:c,props:{className:[d,B]},children:[{type:a,value:"    return conn.getresponse()\n"}]}]}]}]}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"When you "},{type:b,tag:l,props:{},children:[{type:a,value:"saltutil.sync_all"}]},{type:a,value:" (i.e. refresh grains and other data), the log will\ntell you which endpoints it queried."}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"In my case they were:"}]},{type:a,value:f},{type:b,tag:o,props:{className:[p]},children:[{type:b,tag:q,props:{className:[r,"language-shellsession"]},children:[{type:b,tag:l,props:{},children:[{type:b,tag:c,props:{className:[d,"output"]},children:[{type:a,value:"[INFO    ] API call to \u002Fopenstack\u002F2012-08-10\u002Fmeta_data.json\n[INFO    ] API call to \u002Flatest\u002Fmeta-data\u002F\n[INFO    ] API call to \u002Flatest\u002Fmeta-data\u002Fblock-device-mapping\u002F\n[INFO    ] API call to \u002Flatest\u002Fmeta-data\u002Fblock-device-mapping\u002Fami\n[INFO    ] API call to \u002Flatest\u002Fmeta-data\u002Fblock-device-mapping\u002Febs0\n[INFO    ] API call to \u002Flatest\u002Fmeta-data\u002Fblock-device-mapping\u002Febs1\n[INFO    ] API call to \u002Flatest\u002Fmeta-data\u002Fblock-device-mapping\u002Froot\n[INFO    ] API call to \u002Flatest\u002Fmeta-data\u002Fhostname\n[INFO    ] API call to \u002Flatest\u002Fmeta-data\u002Finstance-action\n[INFO    ] API call to \u002Flatest\u002Fmeta-data\u002Finstance-id\n[INFO    ] API call to \u002Flatest\u002Fmeta-data\u002Finstance-type\n[INFO    ] API call to \u002Flatest\u002Fmeta-data\u002Flocal-ipv4\n[INFO    ] API call to \u002Flatest\u002Fmeta-data\u002Fplacement\u002F\n[INFO    ] API call to \u002Flatest\u002Fmeta-data\u002Fplacement\u002Favailability-zone\n[INFO    ] API call to \u002Flatest\u002Fmeta-data\u002Fpublic-ipv4\n[INFO    ] API call to \u002Flatest\u002Fmeta-data\u002Framdisk-id\n[INFO    ] API call to \u002Flatest\u002Fmeta-data\u002Freservation-id\n[INFO    ] API call to \u002Flatest\u002Fmeta-data\u002Fsecurity-groups\n[INFO    ] API call to \u002Fopenstack\u002F2012-08-10\u002Fmeta_data.json\n[INFO    ] API call to \u002Flatest\u002Fmeta-data\u002F\n[INFO    ] API call to \u002Flatest\u002Fmeta-data\u002Fblock-device-mapping\u002F\n[INFO    ] API call to \u002Flatest\u002Fmeta-data\u002Fblock-device-mapping\u002Fami\n[INFO    ] API call to \u002Flatest\u002Fmeta-data\u002Fblock-device-mapping\u002Febs0\n[INFO    ] API call to \u002Flatest\u002Fmeta-data\u002Fblock-device-mapping\u002Febs1\n[INFO    ] API call to \u002Flatest\u002Fmeta-data\u002Fblock-device-mapping\u002Froot\n[INFO    ] API call to \u002Flatest\u002Fmeta-data\u002Fhostname\n[INFO    ] API call to \u002Flatest\u002Fmeta-data\u002Finstance-action\n[INFO    ] API call to \u002Flatest\u002Fmeta-data\u002Finstance-id\n[INFO    ] API call to \u002Flatest\u002Fmeta-data\u002Finstance-type\n[INFO    ] API call to \u002Flatest\u002Fmeta-data\u002Flocal-ipv4\n[INFO    ] API call to \u002Flatest\u002Fmeta-data\u002Fplacement\u002F\n[INFO    ] API call to \u002Flatest\u002Fmeta-data\u002Fplacement\u002Favailability-zone\n[INFO    ] API call to \u002Flatest\u002Fmeta-data\u002Fpublic-ipv4\n[INFO    ] API call to \u002Flatest\u002Fmeta-data\u002Framdisk-id\n[INFO    ] API call to \u002Flatest\u002Fmeta-data\u002Freservation-id\n[INFO    ] API call to \u002Flatest\u002Fmeta-data\u002Fsecurity-groups\n"}]}]}]}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"Its quite heavy."}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"Hopefully the script respects HTTP headers and don't bypass "},{type:b,tag:l,props:{},children:[{type:a,value:"304 Not Modified"}]},{type:a,value:"\nresponses. Otherwise it'll add load to nova. Maybe I should check that\n(note-to-self)."}]},{type:a,value:f},{type:b,tag:F,props:{id:_},children:[{type:b,tag:n,props:{href:"#install",ariaHidden:G,tabIndex:H},children:[{type:b,tag:c,props:{className:[I,J]},children:[]}]},{type:a,value:$}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"You can add this feature by adding a file in your salt states repository in the\n"},{type:b,tag:l,props:{},children:[{type:a,value:"_grains\u002F"}]},{type:a,value:" folder. The file can have any name ending by "},{type:b,tag:l,props:{},children:[{type:a,value:".py"}]},{type:a,value:ap}]},{type:a,value:f},{type:b,tag:j,props:{},children:[{type:a,value:"You can grab the grain python code "},{type:b,tag:n,props:{href:"https:\u002F\u002Fgist.github.com\u002FWebPlatformDocs\u002F6b26b67321fe15870aa0",rel:[s,t,u],target:v,title:"Gist where you can add openstack meta-data in your grains"},children:[{type:a,value:"in this gist"}]},{type:a,value:ap}]},{type:a,value:f},{type:a,value:f},{type:a,value:f}]},text:"---\ntitle: Add OpenStack instance meta-data info in your salt grains\nlocale: en-CA\ncreated: 2015-05-22\nupdated: 2023-11-17\ncanonical: 'https:\u002F\u002Frenoirboulanger.com\u002Fblog\u002F2015\u002F05\u002Fadd-openstack-instance-meta-data-info-salt-grains\u002F'\nstatus: publish\nrevising: false\nmigrateLinks: true\nmigrateImages: false\ngallery: false\ncaption: false\ncategories:\n  - snippet\ntags:\n  - linux\n  - operations\n  - salt-stack\n  - cloud-computing\n  - open-source\nkeywords:\n  - Ansible\n  - Infrastructure as Code\npreamble:\n  text: |\n    It is possible the code shown here no longer works.\n    This was written at the time before VMWare aquired SaltStack and maybe\n    code shown uses parts of Salt Stack that no longer exists.\ncoverImage:\n  src: ~\u002Fassets\u002Fcontent\u002Fblog\u002F2015\u002F05\u002Fwebplatform-openstack-cluster-2014-10-06.png\n  alt: A terminal window showing Open Stack nova client output\n  text: |\n    Open Stack NOVA client is leveraging an internal HTTP API to display data we can\n    consume from the CLI.\n    The present article shows how to add data from OpenStack into Salt Stack.\nexcerpt: \u003E-\n  Ever wanted to target salt states based on data only the underlying OpenStack\n  cluster knows. Here’s how I did it.\n---\n\nDuring a work session on my salt-states for WebPlatform.org I wanted to shape be\nable to query the OpenStack cluster meta-data so that I can adjust more\nefficiently my salt configuration.\n\nWhat are grains? Grains are structured data that describes what a minion has\nsuch as which version of GNU\u002FLinux its running, what are the network adapters,\netc.\n\nThe following is a Python script that adds data in Salt Stack' internal database\ncalled grains.\n\nI have to confess that I didn't write the script but adapted it to work within\nan OpenStack cluster. More precisely on DreamHost's DreamCompute cluster. The\noriginal script came from [saltstack\u002Fsalt-contrib][0] and the original file was\n[ec2_info.py][1] to read data from EC2.\n\nThe [original script][1] wasn't getting any data in the cluster. Most likely due\nto API changes and that EC2 API exposes dynamic meta-data that the\nDreamCompute\u002FOpenStack cluster don't.\n\n\u003Crb-notice-box variant=\"info\" class=\"my-5\"\u003E\n\u003Cstrong slot=\"header\"\u003EScript source\u003C\u002Fstrong\u003E\n\nThe article’s source script is available on GitHub as a Python script we can\ninsert into SaltStack as a grain\n\n- [github.com\u002Fwebplatform\u002Fsalt-states][dreamcompute-grain-webplatform-gh]\n\n\u003C\u002Frb-notice-box\u003E\n\nIn the end, I edited the file to make it work on DreamCompute and also truncated\nsome data that the grains subsystem already has.\n\nMy original objective was to get a list of `security-groups` the VM was\nassigned. Unfortunately the API doesn't give that information yet. Hopefully\nI'll find a way to get that information some day.\n\n## Get OpenStack instance detail using Salt\n\nLocally\n\n```bash\nsalt-call grains.get dreamcompute:uuid\n```\n\n```yaml\nlocal:\n    10a4f390-7c55-4dd3-0000-a00000000000\n```\n\nOr for another machine\n\n```bash\nsalt app1 grains.get dreamcompute:uuid\n```\n\n```yaml\napp1:\n    510f5f24-217b-4fd2-0000-f00000000000\n```\n\nWhat size did we create a particular VM?\n\n```bash\nsalt app1 grains.get dreamcompute:instance_type\n```\n\n```yaml\napp1:\n    lightspeed\n```\n\n## What data you can get\n\nHere is a sample of the grain data that will be added to every salt minion you\nmanage.\n\nYou might notice that some data will be repeated such as the 'hostname', but the\nrest can be very useful if you want to use the data within your configuration\nmanag\n\n```yaml\ndreamcompute:\n    ----------\n    availability_zone:\n        iad-1\n    block_device_mapping:\n        ----------\n        ami:\n            vda\n        ebs0:\n            \u002Fdev\u002Fvdb\n        ebs1:\n            vda\n        root:\n            \u002Fdev\u002Fvda\n    hostname:\n        salt.novalocal\n    instance_action:\n        none\n    instance_id:\n        i-00000000\n    instance_type:\n        lightspeed\n    launch_index:\n        0\n    local_ipv4:\n        10.10.10.11\n    name:\n        salt\n    network_config:\n        ----------\n        content_path:\n            \u002Fcontent\u002F0000\n        name:\n            network_config\n    placement:\n        ----------\n        availability_zone:\n            iad-1\n    public_ipv4:\n        203.0.113.11\n    public_keys:\n        ----------\n        someuser:\n            ssh-rsa ...an rsa public key... someuser-comment@example.org\n    ramdisk_id:\n        None\n    reservation_id:\n        r-33333333\n    security-groups:\n        None\n    uuid:\n        10a4f390-7c55-4dd3-0000-a00000000000\n```\n\n## What does the script do?\n\nThe script basically scrapes OpenStack meta-data service and serializes into\nsaltstack grains system the data it gets.\n\n[OpenStack's meta-data service][3] is similar to what you'd get from AWS, but\ndoesn't expose exactly the same data. This is why I had to adapt the original\nscript.\n\nTo get data from an instance you simply (really!) need to make an HTTP call to\nan [internal IP address that OpenStack nova][3] answers. (that’s what the IPv4\naddress starting by `169.` is)\n\nFor example, from an AWS\u002FOpenStack VM, you can know the instance hostname by\ndoing\n\n```bash\ncurl http:\u002F\u002F169.254.169.254\u002Flatest\u002Fmeta-data\u002Fhostname\n\nsalt.novalocal\n```\n\nTo know what the script calls, [you can add a line at `_call_aws(url)`\nmethod][dreamcompute-grain-webplatform-commit] ([lines 32-34](https:\u002F\u002Fgithub.com\u002Fwebplatform\u002Fsalt-states\u002Fcommit\u002F821ca803#diff-6eea2056af3e939361a559b84665c1d97fc9e062f7b7f79910567fc688881056R32-R34)), like so;\n\n```diff\ndiff --git a\u002F_grains\u002Fdreamcompute.py b\u002F_grains\u002Fdreamcompute.py\nindex 682235d..c3af659 100644\n--- a\u002F_grains\u002Fdreamcompute.py\n+++ b\u002F_grains\u002Fdreamcompute.py\n@@ -25,6 +25,7 @@ def _call_aws(url):\n\n     \"\"\"\n     conn = httplib.HTTPConnection(\"169.254.169.254\", 80, timeout=1)\n+    LOG.info('API call to ' + url )\n     conn.request('GET', url)\n     return conn.getresponse()\n```\n\nWhen you `saltutil.sync_all` (i.e. refresh grains and other data), the log will\ntell you which endpoints it queried.\n\nIn my case they were:\n\n```shellsession\n[INFO    ] API call to \u002Fopenstack\u002F2012-08-10\u002Fmeta_data.json\n[INFO    ] API call to \u002Flatest\u002Fmeta-data\u002F\n[INFO    ] API call to \u002Flatest\u002Fmeta-data\u002Fblock-device-mapping\u002F\n[INFO    ] API call to \u002Flatest\u002Fmeta-data\u002Fblock-device-mapping\u002Fami\n[INFO    ] API call to \u002Flatest\u002Fmeta-data\u002Fblock-device-mapping\u002Febs0\n[INFO    ] API call to \u002Flatest\u002Fmeta-data\u002Fblock-device-mapping\u002Febs1\n[INFO    ] API call to \u002Flatest\u002Fmeta-data\u002Fblock-device-mapping\u002Froot\n[INFO    ] API call to \u002Flatest\u002Fmeta-data\u002Fhostname\n[INFO    ] API call to \u002Flatest\u002Fmeta-data\u002Finstance-action\n[INFO    ] API call to \u002Flatest\u002Fmeta-data\u002Finstance-id\n[INFO    ] API call to \u002Flatest\u002Fmeta-data\u002Finstance-type\n[INFO    ] API call to \u002Flatest\u002Fmeta-data\u002Flocal-ipv4\n[INFO    ] API call to \u002Flatest\u002Fmeta-data\u002Fplacement\u002F\n[INFO    ] API call to \u002Flatest\u002Fmeta-data\u002Fplacement\u002Favailability-zone\n[INFO    ] API call to \u002Flatest\u002Fmeta-data\u002Fpublic-ipv4\n[INFO    ] API call to \u002Flatest\u002Fmeta-data\u002Framdisk-id\n[INFO    ] API call to \u002Flatest\u002Fmeta-data\u002Freservation-id\n[INFO    ] API call to \u002Flatest\u002Fmeta-data\u002Fsecurity-groups\n[INFO    ] API call to \u002Fopenstack\u002F2012-08-10\u002Fmeta_data.json\n[INFO    ] API call to \u002Flatest\u002Fmeta-data\u002F\n[INFO    ] API call to \u002Flatest\u002Fmeta-data\u002Fblock-device-mapping\u002F\n[INFO    ] API call to \u002Flatest\u002Fmeta-data\u002Fblock-device-mapping\u002Fami\n[INFO    ] API call to \u002Flatest\u002Fmeta-data\u002Fblock-device-mapping\u002Febs0\n[INFO    ] API call to \u002Flatest\u002Fmeta-data\u002Fblock-device-mapping\u002Febs1\n[INFO    ] API call to \u002Flatest\u002Fmeta-data\u002Fblock-device-mapping\u002Froot\n[INFO    ] API call to \u002Flatest\u002Fmeta-data\u002Fhostname\n[INFO    ] API call to \u002Flatest\u002Fmeta-data\u002Finstance-action\n[INFO    ] API call to \u002Flatest\u002Fmeta-data\u002Finstance-id\n[INFO    ] API call to \u002Flatest\u002Fmeta-data\u002Finstance-type\n[INFO    ] API call to \u002Flatest\u002Fmeta-data\u002Flocal-ipv4\n[INFO    ] API call to \u002Flatest\u002Fmeta-data\u002Fplacement\u002F\n[INFO    ] API call to \u002Flatest\u002Fmeta-data\u002Fplacement\u002Favailability-zone\n[INFO    ] API call to \u002Flatest\u002Fmeta-data\u002Fpublic-ipv4\n[INFO    ] API call to \u002Flatest\u002Fmeta-data\u002Framdisk-id\n[INFO    ] API call to \u002Flatest\u002Fmeta-data\u002Freservation-id\n[INFO    ] API call to \u002Flatest\u002Fmeta-data\u002Fsecurity-groups\n```\n\nIts quite heavy.\n\nHopefully the script respects HTTP headers and don't bypass `304 Not Modified`\nresponses. Otherwise it'll add load to nova. Maybe I should check that\n(note-to-self).\n\n## Install\n\nYou can add this feature by adding a file in your salt states repository in the\n`_grains\u002F` folder. The file can have any name ending by `.py`.\n\nYou can grab the grain python code [in this gist][4].\n\n\u003C!--#TODO-Improve-Code-Blocks--\u003E\n\u003C!--#TODO-Display-Or-Migrate-Gists--\u003E\n\u003C!--script lazy src=\"https:\u002F\u002Fgist.github.com\u002FWebPlatformDocs\u002F6b26b67321fe15870aa0.js\"\u003E\u003C\u002Fscript--\u003E\n\n[0]: https:\u002F\u002Fgithub.com\u002Fsaltstack\u002Fsalt-contrib\n[1]: https:\u002F\u002Fgithub.com\u002Fsaltstack\u002Fsalt-contrib\u002Fblob\u002Fmaster\u002Fgrains\u002Fec2_info.py\n[3]:\n  http:\u002F\u002Fdocs.openstack.org\u002Fadmin-guide-cloud\u002Fcontent\u002Fsection_metadata-service.html\n[4]:\n  https:\u002F\u002Fgist.github.com\u002FWebPlatformDocs\u002F6b26b67321fe15870aa0\n  'Gist where you can add openstack meta-data in your grains'\n[dreamcompute-grain-webplatform-gh]:\n  https:\u002F\u002Fgithub.com\u002Fwebplatform\u002Fsalt-states\u002Fblob\u002Fmaster\u002F_grains\u002Fdreamcompute.py\n[dreamcompute-grain-webplatform-commit]:\n  https:\u002F\u002Fgithub.com\u002Fwebplatform\u002Fsalt-states\u002Fcommit\u002F821ca803#diff-6eea2056af3e939361a559b84665c1d97fc9e062f7b7f79910567fc688881056R33\n",dir:"\u002Fblog\u002F2015\u002F05",path:"\u002Fblog\u002F2015\u002F05\u002Fadd-openstack-instance-meta-data-info-salt-grains",extension:".md",slug:aq,createdAt:"2024-10-24T19:43:51.725Z",updatedAt:"2024-10-24T19:43:51.726Z",category:Q},coverImage:{toc:[],body:{type:E,children:[{type:b,tag:j,props:{},children:[{type:a,value:"Open Stack NOVA client is leveraging an internal "},{type:b,tag:"abbr",props:{lang:"en",title:"Hyper Text Transfer Protocol"},children:[{type:a,value:"HTTP"}]},{type:a,value:" API to display data we can\nconsume from the CLI.\nThe present article shows how to add data from OpenStack into Salt Stack."}]}]},text:"Open Stack NOVA client is leveraging an internal \u003Cabbr lang=\"en\" title=\"Hyper Text Transfer Protocol\"\u003EHTTP\u003C\u002Fabbr\u003E API to display data we can\nconsume from the CLI.\nThe present article shows how to add data from OpenStack into Salt Stack.\n",src:S,alt:T},month:"05",next:{title:"Migrating WebPlatform.org MediaWiki into Git as Markdown files",locale:N,path:"\u002Fblog\u002F2015\u002F07\u002Fmigrating-webplatform-org-mediawiki-into-git-history-and-into-markdown-files",slug:"migrating-webplatform-org-mediawiki-into-git-history-and-into-markdown-files"},preamble:{toc:[],body:{type:E,children:[{type:b,tag:j,props:{},children:[{type:a,value:"It is possible the code shown here no longer works.\nThis was written at the time before VMWare aquired SaltStack and maybe\ncode shown uses parts of Salt Stack that no longer exists."}]}]},text:R},prettyfiedTemporalDate:{prettified:"Friday, May 22, 2015",temporalDate:"2015-05-22"},prev:{title:"Converting a dynamic site into static HTML documents",locale:N,path:"\u002Fblog\u002F2015\u002F05\u002Fconverting-dynamic-site-static-copy",slug:"converting-dynamic-site-static-copy"},slug:aq,year:"2015"}],fetch:[],mutations:void 0}}("text","element","span","token","punctuation","\n","key","atrule",":","p","-","code","---","a","div","nuxt-content-highlight","pre","line-numbers","nofollow","noopener","noreferrer","_blank","\n        ","\n    ","unchanged","number","prefix","line",false,2,"root","h2","true",-1,"icon","icon-link","language-bash","language-yaml"," ","en-CA","0000","https:\u002F\u002Frenoirboulanger.com\u002Fblog\u002F2015\u002F05\u002Fadd-openstack-instance-meta-data-info-salt-grains\u002F","snippet","It is possible the code shown here no longer works.\nThis was written at the time before VMWare aquired SaltStack and maybe\ncode shown uses parts of Salt Stack that no longer exists.\n","~\u002Fassets\u002Fcontent\u002Fblog\u002F2015\u002F05\u002Fwebplatform-openstack-cluster-2014-10-06.png","A terminal window showing Open Stack nova client output","get-openstack-instance-detail-using-salt","Get OpenStack instance detail using Salt","what-data-you-can-get","What data you can get","what-does-the-script-do","What does the script do?","install","Install","https:\u002F\u002Fgithub.com\u002Fsaltstack\u002Fsalt-contrib\u002Fblob\u002Fmaster\u002Fgrains\u002Fec2_info.py","security-groups","7c55","4dd3","a00000000000\n","app1","availability_zone","1","\n            vda\n        ","name","...","\n        None\n    ","http:\u002F\u002Fdocs.openstack.org\u002Fadmin-guide-cloud\u002Fcontent\u002Fsection_metadata-service.html","coord","inserted",".","add-openstack-instance-meta-data-info-salt-grains")));