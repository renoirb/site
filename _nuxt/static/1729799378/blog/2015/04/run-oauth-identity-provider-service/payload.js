__NUXT_JSONP__("/blog/2015/04/run-oauth-identity-provider-service", (function(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,A,B,C,D,E,F,G,H,I,J,K,L,M){return {data:[{},{},{},{canonical:w,content:{title:"How to run your own OAuth Identity provider service",locale:k,created:"2015-04-13T00:00:00.000Z",updated:"2023-02-18T00:00:00.000Z",canonical:w,status:"publish",revising:false,categories:[x],tags:["webplatform","security"],keywords:["IdP",y,"Authorization","TLS"],coverImage:{src:z,text:A},preamble:{text:"All infrastructure related to WebPlatform Docs is shut down since 2016.\nMentions about SSO and OAuth is still (2020) accessible from the archived [`webplatform.github.io\u002Fdocs\u002FWPD\u002FProjects\u002FSSO` wiki pages][wpd-projects-sso].\n[wpd-projects-sso]: https:\u002F\u002Fwebplatform.github.io\u002Fdocs\u002FWPD\u002FProjects\u002FSSO\u002F\n",figcaption:j},excerpt:"Tutorials and explanation on how to be your own OAuth Identity Provider are very scarce and I’ve come to achieve this, this is an attempt to outline the basics.",toc:[{id:B,depth:l,text:C},{id:D,depth:l,text:E},{id:F,depth:l,text:G}],body:{type:m,children:[{type:b,tag:d,props:{},children:[{type:a,value:"Generally, we connect our application against a provider so it can share details\nabout a user. Most of the documentation you'll find online explains how to use\ntheir service, but very few outlines concisely how it is if you want to be your\nown provider and share state across applications you also manage."}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Documentation would generally allow your third party app to let users use their\ninformation from another site such as "},{type:b,tag:e,props:{href:"https:\u002F\u002Fdevelopers.facebook.com\u002Fdocs\u002Ffacebook-login\u002Fv2.3",rel:[f,g,h],target:i},children:[{type:a,value:"Facebook"}]},{type:a,value:H},{type:b,tag:e,props:{href:"https:\u002F\u002Fdeveloper.github.com\u002Fv3\u002Foauth_authorizations\u002F#create-a-new-authorization",rel:[f,g,h],target:i},children:[{type:a,value:"GitHub"}]},{type:a,value:H},{type:b,tag:e,props:{href:"https:\u002F\u002Fdev.twitter.com\u002Foauth",rel:[f,g,h],target:i},children:[{type:a,value:"Twitter"}]},{type:a,value:",\netc."}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"But what if you wanted to share information across your web applications in a\nsimilar way?"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"This post is a quick summary of how things works so you can get acquainted with\nthe basics."}]},{type:a,value:c},{type:b,tag:n,props:{id:B},children:[{type:b,tag:e,props:{href:"#whitelist",ariaHidden:o,tabIndex:p},children:[{type:b,tag:q,props:{className:[r,s]},children:[]}]},{type:a,value:C}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Big sites aren't generally one big code repository but a set of separate\ncomponents. A way to make each component to share your account details is most\npossibly by making a difference between their own infrastructure and third\nparties."}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"If your app were to use an external resource such as Google, the process would\nend up making Google users to be asked if they really want to share their\ninformation with you. This is why they would get a dialog similar to this."}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"While its OK to ask confirmation from a user if he wants to share his details\nwith an external site, in the case of two components from the same site can\nshare this information transparently."}]},{type:a,value:c},{type:b,tag:t,props:{src:"~\u002Fassets\u002Fcontent\u002Fblog\u002F2015\u002F02\u002Foauth_tutorial_authorization_sample.png",alt:"OAuth confirmation modal with Google logo. Asking: My project is requesting permission to: Manage your calendars, manage your documents.",figcaption:j},children:[{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Looking at this OAuth dialog, I can't help but feel a bit uneasy. Sure, it looks clean and official, but I'm noticing how many apps are asking for more access than they seem to need. What bugs me is we can't pick and choose - it's all or nothing. I've got this nagging feeling that companies might use this to grab as much data as they can about us, building detailed profiles along the way. With how quickly this is catching on, it's starting to feel like a ticking time bomb for our personal info. Maybe I'm overthinking it, but something about this just doesn't sit right with me."}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"If you are your own Identity Provider, you can configure your relying parties as\n\"whitelisted\" so that your accounts system don't display such dialog."}]},{type:a,value:c},{type:b,tag:n,props:{id:D},children:[{type:b,tag:e,props:{href:"#becoming-your-own-identity-provider",ariaHidden:o,tabIndex:p},children:[{type:b,tag:q,props:{className:[r,s]},children:[]}]},{type:a,value:E}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"In the case of "},{type:b,tag:"nuxt-link",props:{to:"\u002Fblog\u002Ftag\u002Fwebplatform-docs"},children:[{type:a,value:I}]},{type:a,value:" we wanted to become our own Identity\nprovider and found that we could deploy our own fork of "},{type:b,tag:u,props:{},children:[{type:a,value:"Firefox Accounts"}]},{type:a,value:"\n(\"FxA\") would allow us to do so."}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"The way its designed is that we have an OAuth protected \"profile\" endpoint that\nholds user details (email, full name, etc) as a \"source of truth\". Each relying\nparty (your own wiki, discussion forum, etc) gathers information from and ensure\nit has the same information locally."}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"In order to do so, we have to make a module\u002Fplugin for each web application so\nwe it can query and bootstrap users locally based on the accounts system. We\ncall those \"relying parties\"."}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Once we have relying party adapter in place, a web app will have the ability to\ncheck by itself with the\n"},{type:b,tag:u,props:{},children:[{type:a,value:"accounts server"}]},{type:a,value:j},{type:a,value:"\nto see if there's a session for\nthe current browsing session. If it has, it'll give either an already generated\nOAuth Bearer token, or generate one for the one for the service in question —\nthe \"SSO\" behavior."}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"With the OAuth Bearer token in hand, a relying party (i.e. the\n"},{type:b,tag:"del",props:{},children:[{type:b,tag:v,props:{},children:[{type:a,value:I}]},{type:a,value:" annotation service"}]},{type:a,value:") can go read details from the\n\"profile\" endpoint and then check locally if it already has a user available."}]},{type:a,value:c},{type:b,tag:t,props:{style:J,src:"~\u002Fassets\u002Fcontent\u002Fblog\u002F2015\u002F04\u002F2014-12-16-notes-server-SSO.png",alt:"WebPlatform Notes A Specification annotation tool",figcaption:"The WebPlatform Notes specification annotation tool."},children:[{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"It was one of the last parts added to the "},{type:b,tag:v,props:{},children:[{type:a,value:"WebPlatform"}]},{type:a,value:" project and was\ndesigned to support adding annotations to specifications and to "},{type:b,tag:u,props:{},children:[{type:a,value:"leverage a\nSingle-Sign-On"}]},{type:a,value:" between other parts of the site."}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Unfortunately the project never released the feature to the public before\nclosing."}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"But "},{type:b,tag:e,props:{href:"https:\u002F\u002Fyoutu.be\u002FKKeh9C4SMnw",rel:[f,g,h],target:i},children:[{type:a,value:"I’ve made a YouTube video of its integration while I was building\nit"}]},{type:a,value:". The "},{type:b,tag:e,props:{href:K,rel:[f,g,h],target:i},children:[{type:a,value:"notes about it are available in the archived\nwiki"}]}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"If the relying party doesn't have a user, it'll create one."}]},{type:a,value:c},{type:b,tag:t,props:{style:J,src:"~\u002Fassets\u002Fcontent\u002Fblog\u002F2015\u002F04\u002F2014-12-16-notes-server-SSO-13.33.38.png",alt:"Terminal session issuing HTTP call using cURL",figcaption:"With appropriate HTTP headers for current OAuth bearer token, requesting data to a profile server and giving current user’s data."},children:[{type:a,value:c}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Each relying party is responsible to sync its local user and session state based\non what the accounts service gives."}]},{type:a,value:c},{type:b,tag:n,props:{id:F},children:[{type:b,tag:e,props:{href:"#seeing-in-action",ariaHidden:o,tabIndex:p},children:[{type:b,tag:q,props:{className:[r,s]},children:[]}]},{type:a,value:G}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Here is a recording I made showing how it looked like;"}]},{type:a,value:c},{type:b,tag:"iframe",props:{width:L,height:L,src:"https:\u002F\u002Fwww.youtube.com\u002Fembed\u002FKKeh9C4SMnw",frameBorder:"0",allow:"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture",allowFullScreen:true},children:[]}]},text:"---\ntitle: How to run your own OAuth Identity provider service\nlocale: en-CA\ncreated: 2015-04-13\nupdated: 2023-02-18\ncanonical: https:\u002F\u002Frenoirboulanger.com\u002Fblog\u002F2015\u002F04\u002Frun-oauth-identity-provider-service\u002F\nstatus: publish\nrevising: false\ncategories:\n  - experiments\ntags:\n  - webplatform\n  - security\nkeywords:\n  - IdP\n  - OAuth\n  - Authorization\n  - TLS\ncoverImage:\n  src: ~\u002Fassets\u002Fcontent\u002Fblog\u002F2015\u002F03\u002FOauth_logo.png\n  text: |\n    [OAuth logo][oauth], see also [its current **Specification** document][oauth-spec]\n    [oauth-spec]: https:\u002F\u002Foauth.net\u002F2\u002F\n    [oauth]: https:\u002F\u002Foauth.net\u002F\npreamble:\n  text: |\n    All infrastructure related to WebPlatform Docs is shut down since 2016.\n    Mentions about SSO and OAuth is still (2020) accessible from the archived [`webplatform.github.io\u002Fdocs\u002FWPD\u002FProjects\u002FSSO` wiki pages][wpd-projects-sso].\n    [wpd-projects-sso]: https:\u002F\u002Fwebplatform.github.io\u002Fdocs\u002FWPD\u002FProjects\u002FSSO\u002F\n  figcaption: ' '\nexcerpt: \u003E-\n  Tutorials and explanation on how to be your own OAuth Identity Provider are\n  very scarce and I’ve come to achieve this, this is an attempt to outline the\n  basics.\n---\n\nGenerally, we connect our application against a provider so it can share details\nabout a user. Most of the documentation you'll find online explains how to use\ntheir service, but very few outlines concisely how it is if you want to be your\nown provider and share state across applications you also manage.\n\nDocumentation would generally allow your third party app to let users use their\ninformation from another site such as [Facebook][0], [GitHub][1], [Twitter][2],\netc.\n\nBut what if you wanted to share information across your web applications in a\nsimilar way?\n\nThis post is a quick summary of how things works so you can get acquainted with\nthe basics.\n\n## Whitelist\n\n\nBig sites aren't generally one big code repository but a set of separate\ncomponents. A way to make each component to share your account details is most\npossibly by making a difference between their own infrastructure and third\nparties.\n\nIf your app were to use an external resource such as Google, the process would\nend up making Google users to be asked if they really want to share their\ninformation with you. This is why they would get a dialog similar to this.\n\n\nWhile its OK to ask confirmation from a user if he wants to share his details\nwith an external site, in the case of two components from the same site can\nshare this information transparently.\n\n\u003Capp-image src=\"~\u002Fassets\u002Fcontent\u002Fblog\u002F2015\u002F02\u002Foauth_tutorial_authorization_sample.png\" alt=\"OAuth confirmation modal with Google logo. Asking: My project is requesting permission to: Manage your calendars, manage your documents.\" figcaption=\" \"\u003E\n\nLooking at this OAuth dialog, I can't help but feel a bit uneasy. Sure, it looks clean and official, but I'm noticing how many apps are asking for more access than they seem to need. What bugs me is we can't pick and choose - it's all or nothing. I've got this nagging feeling that companies might use this to grab as much data as they can about us, building detailed profiles along the way. With how quickly this is catching on, it's starting to feel like a ticking time bomb for our personal info. Maybe I'm overthinking it, but something about this just doesn't sit right with me.\n\n\u003C\u002Fapp-image\u003E\n\nIf you are your own Identity Provider, you can configure your relying parties as\n\"whitelisted\" so that your accounts system don't display such dialog.\n\n## Becoming your own Identity provider\n\nIn the case of [WebPlatform.org][3] we wanted to become our own Identity\nprovider and found that we could deploy our own fork of _Firefox Accounts_\n(\"FxA\") would allow us to do so.\n\nThe way its designed is that we have an OAuth protected \"profile\" endpoint that\nholds user details (email, full name, etc) as a \"source of truth\". Each relying\nparty (your own wiki, discussion forum, etc) gathers information from and ensure\nit has the same information locally.\n\nIn order to do so, we have to make a module\u002Fplugin for each web application so\nwe it can query and bootstrap users locally based on the accounts system. We\ncall those \"relying parties\".\n\nOnce we have relying party adapter in place, a web app will have the ability to\ncheck by itself with the\n*accounts server* \u003C!--#TODO-inline-edit--\u003E\nto see if there's a session for\nthe current browsing session. If it has, it'll give either an already generated\nOAuth Bearer token, or generate one for the one for the service in question —\nthe \"SSO\" behavior.\n\nWith the OAuth Bearer token in hand, a relying party (i.e. the\n~~**WebPlatform.org** annotation service~~) can go read details from the\n\"profile\" endpoint and then check locally if it already has a user available.\n\n\u003Capp-image style=\"float:unset;\" src=\"~\u002Fassets\u002Fcontent\u002Fblog\u002F2015\u002F04\u002F2014-12-16-notes-server-SSO.png\" alt=\"WebPlatform Notes A Specification annotation tool\" figcaption=\"The WebPlatform Notes specification annotation tool.\"\u003E\n\nIt was one of the last parts added to the **WebPlatform** project and was\ndesigned to support adding annotations to specifications and to _leverage a\nSingle-Sign-On_ between other parts of the site.\n\nUnfortunately the project never released the feature to the public before\nclosing.\n\nBut [I’ve made a YouTube video of its integration while I was building\nit][wpd-sso-yt]. The [notes about it are available in the archived\nwiki][wpd-projects-sso]\n\n\u003C\u002Fapp-image\u003E\n\nIf the relying party doesn't have a user, it'll create one.\n\n\u003Capp-image style=\"float:unset;\" src=\"~\u002Fassets\u002Fcontent\u002Fblog\u002F2015\u002F04\u002F2014-12-16-notes-server-SSO-13.33.38.png\" alt=\"Terminal session issuing HTTP call using cURL\" figcaption=\"With appropriate HTTP headers for current OAuth bearer token, requesting data to a profile server and giving current user’s data.\"\u003E\n\u003C\u002Fapp-image\u003E\n\nEach relying party is responsible to sync its local user and session state based\non what the accounts service gives.\n\n## Seeing in action\n\nHere is a recording I made showing how it looked like;\n\n\u003Ciframe width=\"560\" height=\"560\" src=\"https:\u002F\u002Fwww.youtube.com\u002Fembed\u002FKKeh9C4SMnw\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen\u003E\u003C\u002Fiframe\u003E\n\n[wpd-sso-yt]: https:\u002F\u002Fyoutu.be\u002FKKeh9C4SMnw\n[wpd-projects-sso]: https:\u002F\u002Fwebplatform.github.io\u002Fdocs\u002FWPD\u002FProjects\u002FSSO\u002F\n[0]: https:\u002F\u002Fdevelopers.facebook.com\u002Fdocs\u002Ffacebook-login\u002Fv2.3\n[1]:\n  https:\u002F\u002Fdeveloper.github.com\u002Fv3\u002Foauth_authorizations\u002F#create-a-new-authorization\n[2]: https:\u002F\u002Fdev.twitter.com\u002Foauth\n[3]: \u002Fblog\u002Ftag\u002Fwebplatform-docs\n",dir:"\u002Fblog\u002F2015\u002F04",path:"\u002Fblog\u002F2015\u002F04\u002Frun-oauth-identity-provider-service",extension:".md",slug:M,createdAt:"2024-10-24T19:43:51.724Z",updatedAt:"2024-10-24T19:43:51.725Z",category:x},coverImage:{toc:[],body:{type:m,children:[{type:b,tag:d,props:{},children:[{type:b,tag:e,props:{href:"https:\u002F\u002Foauth.net\u002F",rel:[f,g,h],target:i},children:[{type:a,value:"OAuth logo"}]},{type:a,value:", see also "},{type:b,tag:e,props:{href:"https:\u002F\u002Foauth.net\u002F2\u002F",rel:[f,g,h],target:i},children:[{type:a,value:"its current "},{type:b,tag:v,props:{},children:[{type:a,value:"Specification"}]},{type:a,value:" document"}]}]}]},text:A,src:z},month:"04",next:{title:"Setting up Discourse with Fastly as a CDN provider and TLS",locale:k,path:"\u002Fblog\u002F2015\u002F04\u002Fsetting-discourse-fastly-cdn-provider-ssl",slug:"setting-discourse-fastly-cdn-provider-ssl"},preamble:{toc:[],body:{type:m,children:[{type:b,tag:d,props:{},children:[{type:a,value:"All infrastructure related to WebPlatform Docs is shut down since 2016.\nMentions about SSO and "},{type:b,tag:"abbr",props:{lang:"en",title:"open authorization"},children:[{type:a,value:y}]},{type:a,value:" is still (2020) accessible from the archived "},{type:b,tag:e,props:{href:K,rel:[f,g,h],target:i},children:[{type:b,tag:"code",props:{},children:[{type:a,value:"webplatform.github.io\u002Fdocs\u002FWPD\u002FProjects\u002FSSO"}]},{type:a,value:" wiki pages"}]},{type:a,value:"."}]}]},text:"All infrastructure related to WebPlatform Docs is shut down since 2016.\nMentions about SSO and \u003Cabbr lang=\"en\" title=\"open authorization\"\u003EOAuth\u003C\u002Fabbr\u003E is still (2020) accessible from the archived [`webplatform.github.io\u002Fdocs\u002FWPD\u002FProjects\u002FSSO` wiki pages][wpd-projects-sso].\n[wpd-projects-sso]: https:\u002F\u002Fwebplatform.github.io\u002Fdocs\u002FWPD\u002FProjects\u002FSSO\u002F\n",figcaption:j},prettyfiedTemporalDate:{prettified:"Monday, April 13, 2015",temporalDate:"2015-04-13"},prev:{title:"Upgrade to Python 2.7.9 on Ubuntu 14.04 LTS and make your own .deb package for deployment",locale:k,path:"\u002Fblog\u002F2015\u002F04\u002Fupgrade-python-2-7-9-ubuntu-14-04-lts-making-deb-package",slug:"upgrade-python-2-7-9-ubuntu-14-04-lts-making-deb-package"},slug:M,year:"2015"}],fetch:[],mutations:void 0}}("text","element","\n","p","a","nofollow","noopener","noreferrer","_blank"," ","en-CA",2,"root","h2","true",-1,"span","icon","icon-link","app-image","em","strong","https:\u002F\u002Frenoirboulanger.com\u002Fblog\u002F2015\u002F04\u002Frun-oauth-identity-provider-service\u002F","experiments","OAuth","~\u002Fassets\u002Fcontent\u002Fblog\u002F2015\u002F03\u002FOauth_logo.png","[OAuth logo][oauth], see also [its current **Specification** document][oauth-spec]\n[oauth-spec]: https:\u002F\u002Foauth.net\u002F2\u002F\n[oauth]: https:\u002F\u002Foauth.net\u002F\n","whitelist","Whitelist","becoming-your-own-identity-provider","Becoming your own Identity provider","seeing-in-action","Seeing in action",", ","WebPlatform.org","float:unset;","https:\u002F\u002Fwebplatform.github.io\u002Fdocs\u002FWPD\u002FProjects\u002FSSO\u002F",560,"run-oauth-identity-provider-service")));